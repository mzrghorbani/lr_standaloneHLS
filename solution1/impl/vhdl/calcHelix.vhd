-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity calcHelix is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    LinearRegression_settings_chosenRofPhi_read : IN STD_LOGIC_VECTOR (31 downto 0);
    LinearRegression_settings_chosenRofZ_read : IN STD_LOGIC_VECTOR (31 downto 0);
    LinearRegression_HTParameter_qOverPt_read : IN STD_LOGIC_VECTOR (31 downto 0);
    LinearRegression_HTParameter_phiT_read : IN STD_LOGIC_VECTOR (31 downto 0);
    LinearRegression_HTParameter_cotTheta_read : IN STD_LOGIC_VECTOR (31 downto 0);
    LinearRegression_HTParameter_zT_read : IN STD_LOGIC_VECTOR (31 downto 0);
    LinearRegression_stubMap_size_read : IN STD_LOGIC_VECTOR (31 downto 0);
    LinearRegression_stubMap_data_second_size_s_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    LinearRegression_stubMap_data_second_size_s_ce0 : OUT STD_LOGIC;
    LinearRegression_stubMap_data_second_size_s_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    LinearRegression_stubMap_data_second_data_r_s_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    LinearRegression_stubMap_data_second_data_r_s_ce0 : OUT STD_LOGIC;
    LinearRegression_stubMap_data_second_data_r_s_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    LinearRegression_stubMap_data_second_data_phi_s_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    LinearRegression_stubMap_data_second_data_phi_s_ce0 : OUT STD_LOGIC;
    LinearRegression_stubMap_data_second_data_phi_s_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    LinearRegression_stubMap_data_second_data_z_s_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    LinearRegression_stubMap_data_second_data_z_s_ce0 : OUT STD_LOGIC;
    LinearRegression_stubMap_data_second_data_z_s_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    LinearRegression_stubMap_data_second_data_psModule_s_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    LinearRegression_stubMap_data_second_data_psModule_s_ce0 : OUT STD_LOGIC;
    LinearRegression_stubMap_data_second_data_psModule_s_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of calcHelix is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (54 downto 0) := "0000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (54 downto 0) := "0000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (54 downto 0) := "0000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (54 downto 0) := "0000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (54 downto 0) := "0000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (54 downto 0) := "0000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (54 downto 0) := "0001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (54 downto 0) := "0010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (54 downto 0) := "0100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (54 downto 0) := "1000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_FF7FFFEE : STD_LOGIC_VECTOR (31 downto 0) := "11111111011111111111111111101110";
    constant ap_const_lv32_7FFFE1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000011111111111111111100001";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_3E22F983 : STD_LOGIC_VECTOR (31 downto 0) := "00111110001000101111100110000011";
    constant ap_const_lv32_40C90FDB : STD_LOGIC_VECTOR (31 downto 0) := "01000000110010010000111111011011";
    constant ap_const_lv32_3F000000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111000000000000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_40490FDB : STD_LOGIC_VECTOR (31 downto 0) := "01000000010010010000111111011011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_347_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_543 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal grp_fu_353_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_553 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_361_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_562 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_366_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_570 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_383_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_577 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal grp_fu_387_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_586 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ps_reg_324 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal tmp_581_fu_732_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_581_reg_1707 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal p_rec1_fu_743_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_rec1_reg_1715 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_738_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal LinearRegression_stu_426_reg_1735 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_i_fu_749_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_reg_1740 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal p_rec_fu_777_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_rec_reg_1767 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal LinearRegression_stu_434_reg_1788 : STD_LOGIC_VECTOR (0 downto 0);
    signal layerMinPos_RPhi_fu_867_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal layerMinPos_RPhi_reg_1797 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal layerMaxPos_RPhi_fu_1015_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal layerMaxPos_RPhi_reg_1802 : STD_LOGIC_VECTOR (31 downto 0);
    signal layerMaxPos_RZ_1_fu_1079_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal layerMaxPos_RZ_1_reg_1807 : STD_LOGIC_VECTOR (31 downto 0);
    signal layerMinPos_RZ_1_fu_1086_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal layerMinPos_RZ_1_reg_1812 : STD_LOGIC_VECTOR (31 downto 0);
    signal layerMaxPos_Z_1_fu_1241_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal layerMaxPos_Z_1_reg_1817 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal layerMinPos_Z_1_fu_1248_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal layerMinPos_Z_1_reg_1822 : STD_LOGIC_VECTOR (31 downto 0);
    signal ps_1_fu_1255_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ps_1_reg_1827 : STD_LOGIC_VECTOR (0 downto 0);
    signal pos_Phi_fu_1363_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal pos_Phi_reg_1832 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal layerMinPos_Phi_fu_1454_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal layerMaxPos_Phi_fu_1509_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_i_reg_1851 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal tmp_5_i_reg_1856 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_i3_reg_1861 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal tmp_5_i1_reg_1866 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_451_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i7_reg_1871 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal grp_fu_454_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i8_reg_1877 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_395_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_i_reg_1883 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_399_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_13_reg_1888 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_403_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_i_reg_1893 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_407_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_i_reg_1898 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_411_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_i1_reg_1903 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_415_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_i1_reg_1908 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_419_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_i1_reg_1913 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_423_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i3_reg_1918 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_427_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_i1_reg_1923 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_431_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_i1_reg_1928 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_375_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_i2_reg_1933 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_379_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_i1_reg_1938 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_begin_0_rec_reg_217 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal stubData_Z_read_assi_reg_228 : STD_LOGIC_VECTOR (31 downto 0);
    signal stubData_RZ_read_ass_reg_240 : STD_LOGIC_VECTOR (31 downto 0);
    signal stubData_Phi_read_as_reg_252 : STD_LOGIC_VECTOR (31 downto 0);
    signal stubData_RPhi_read_a_reg_264 : STD_LOGIC_VECTOR (31 downto 0);
    signal stubData_Z_read_assi_1_reg_276 : STD_LOGIC_VECTOR (31 downto 0);
    signal stubData_RZ_read_ass_1_reg_288 : STD_LOGIC_VECTOR (31 downto 0);
    signal stubData_Phi_read_as_1_reg_300 : STD_LOGIC_VECTOR (31 downto 0);
    signal stubData_RPhi_read_a_1_reg_312 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_begin2_0_rec_reg_336 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_begin_0_rec_cast2_fu_703_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_595_cast_fu_764_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sumData_n_read_assig_fu_70 : STD_LOGIC_VECTOR (31 downto 0);
    signal zSums_n_fu_1557_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sumData_xy_read_assi_fu_74 : STD_LOGIC_VECTOR (31 downto 0);
    signal sumData_x_read_assig_fu_78 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal sumData_y_read_assig_fu_82 : STD_LOGIC_VECTOR (31 downto 0);
    signal sumData_xx_read_assi_fu_86 : STD_LOGIC_VECTOR (31 downto 0);
    signal sumData_n_read_assig_1_fu_90 : STD_LOGIC_VECTOR (31 downto 0);
    signal phiSums_n_fu_1526_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sumData_xy_read_assi_1_fu_94 : STD_LOGIC_VECTOR (31 downto 0);
    signal sumData_x_read_assig_1_fu_98 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal sumData_y_read_assig_1_fu_102 : STD_LOGIC_VECTOR (31 downto 0);
    signal sumData_xx_read_assi_1_fu_106 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_347_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_347_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal grp_fu_353_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_353_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_361_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_361_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_366_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_366_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_383_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_383_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal grp_fu_387_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_387_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal grp_fu_457_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_457_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_462_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_0_i_i_i_fu_1312_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_462_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_609_fu_708_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_610_fu_720_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_cast_fu_712_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl1_cast_fu_724_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_611_fu_755_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_582_fu_759_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal pos_RPhi_to_int_fu_783_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal stubData_RPhi_read_a_2_fu_801_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_141_fu_787_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_614_fu_797_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs3_fu_825_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs7_fu_819_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_143_fu_805_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_615_fu_815_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs4_fu_843_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs9_fu_837_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_145_fu_831_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_146_fu_849_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_147_fu_855_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_457_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_149_fu_861_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pos_RZ_to_int_fu_875_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal stubData_RZ_read_ass_2_fu_893_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_159_fu_879_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_618_fu_889_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs7_fu_917_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs3_fu_911_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_161_fu_897_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_619_fu_907_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs8_fu_935_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs4_fu_929_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_163_fu_923_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_164_fu_941_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_165_fu_947_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_462_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_167_fu_953_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal stubData_RPhi_read_a_3_fu_967_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_177_fu_971_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_622_fu_981_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs12_fu_991_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs10_fu_985_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_179_fu_997_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_180_fu_1003_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_181_fu_467_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_182_fu_1009_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal stubData_RZ_read_ass_3_fu_1023_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_189_fu_1027_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_624_fu_1037_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs14_fu_1047_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs12_fu_1041_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_191_fu_1053_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_192_fu_1059_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_193_fu_472_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_194_fu_1065_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal layerMaxPos_RZ_fu_1071_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal layerMinPos_RZ_fu_959_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal pos_Z_to_int_fu_1093_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal stubData_Z_read_assi_2_fu_1111_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_168_fu_1097_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_620_fu_1107_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs10_fu_1135_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs5_fu_1129_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_170_fu_1115_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_621_fu_1125_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs11_fu_1153_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs6_fu_1147_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_172_fu_1141_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_173_fu_1159_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_174_fu_1165_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_176_fu_1171_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal stubData_Z_read_assi_3_fu_1185_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_195_fu_1189_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_625_fu_1199_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs15_fu_1209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs13_fu_1203_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_197_fu_1215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_198_fu_1221_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_200_fu_1227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal layerMaxPos_Z_fu_1233_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal layerMinPos_Z_fu_1177_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi1_assign_to_int_fu_1260_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_1264_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_612_fu_1274_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_1284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_1278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_133_fu_1290_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_neg_i_i_i_fu_1302_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_135_fu_1296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_i_fu_1308_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_0_i_i_i_to_int_fu_1321_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_136_fu_1325_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_613_fu_1335_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs9_fu_1345_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs8_fu_1339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_138_fu_1351_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_140_fu_1357_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pos_Phi_to_int_fu_1371_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal stubData_Phi_read_as_2_fu_1388_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_150_fu_1374_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_616_fu_1384_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs5_fu_1412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs1_fu_1406_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_152_fu_1392_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_617_fu_1402_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs6_fu_1430_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs2_fu_1424_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_154_fu_1418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_155_fu_1436_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_156_fu_1442_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_158_fu_1448_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal stubData_Phi_read_as_3_fu_1461_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_183_fu_1465_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_623_fu_1475_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs13_fu_1485_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs11_fu_1479_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_185_fu_1491_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_186_fu_1497_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_188_fu_1503_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_435_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal grp_fu_439_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_443_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_447_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_347_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_81_fu_772_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_353_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_462_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_3_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (54 downto 0);

    component LRupdateHLS_faddfsub_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component LRupdateHLS_fsub_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component LRupdateHLS_fmul_32ns_32ns_32_2_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component LRupdateHLS_fdiv_32ns_32ns_32_8_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component LRupdateHLS_uitofp_32ns_32_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component LRupdateHLS_fcmp_32ns_32ns_1_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    LRupdateHLS_faddfsub_32ns_32ns_32_4_full_dsp_1_U187 : component LRupdateHLS_faddfsub_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_347_p0,
        din1 => grp_fu_347_p1,
        opcode => grp_fu_347_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_347_p2);

    LRupdateHLS_faddfsub_32ns_32ns_32_4_full_dsp_1_U188 : component LRupdateHLS_faddfsub_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_353_p0,
        din1 => grp_fu_353_p1,
        opcode => grp_fu_353_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_353_p2);

    LRupdateHLS_fsub_32ns_32ns_32_4_full_dsp_1_U189 : component LRupdateHLS_fsub_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_361_p0,
        din1 => grp_fu_361_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_361_p2);

    LRupdateHLS_fsub_32ns_32ns_32_4_full_dsp_1_U190 : component LRupdateHLS_fsub_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_366_p0,
        din1 => grp_fu_366_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_366_p2);

    LRupdateHLS_fsub_32ns_32ns_32_4_full_dsp_1_U191 : component LRupdateHLS_fsub_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_9_i1_reg_1913,
        din1 => tmp_i3_reg_1918,
        ce => ap_const_logic_1,
        dout => grp_fu_375_p2);

    LRupdateHLS_fsub_32ns_32ns_32_4_full_dsp_1_U192 : component LRupdateHLS_fsub_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_2_i1_reg_1923,
        din1 => tmp_3_i1_reg_1928,
        ce => ap_const_logic_1,
        dout => grp_fu_379_p2);

    LRupdateHLS_fmul_32ns_32ns_32_2_max_dsp_1_U193 : component LRupdateHLS_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_383_p0,
        din1 => grp_fu_383_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_383_p2);

    LRupdateHLS_fmul_32ns_32ns_32_2_max_dsp_1_U194 : component LRupdateHLS_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_387_p0,
        din1 => grp_fu_387_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_387_p2);

    LRupdateHLS_fmul_32ns_32ns_32_2_max_dsp_1_U195 : component LRupdateHLS_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_i7_reg_1871,
        din1 => sumData_xy_read_assi_1_fu_94,
        ce => ap_const_logic_1,
        dout => grp_fu_395_p2);

    LRupdateHLS_fmul_32ns_32ns_32_2_max_dsp_1_U196 : component LRupdateHLS_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sumData_x_read_assig_1_fu_98,
        din1 => sumData_y_read_assig_1_fu_102,
        ce => ap_const_logic_1,
        dout => grp_fu_399_p2);

    LRupdateHLS_fmul_32ns_32ns_32_2_max_dsp_1_U197 : component LRupdateHLS_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sumData_y_read_assig_1_fu_102,
        din1 => sumData_xx_read_assi_1_fu_106,
        ce => ap_const_logic_1,
        dout => grp_fu_403_p2);

    LRupdateHLS_fmul_32ns_32ns_32_2_max_dsp_1_U198 : component LRupdateHLS_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sumData_x_read_assig_1_fu_98,
        din1 => sumData_xy_read_assi_1_fu_94,
        ce => ap_const_logic_1,
        dout => grp_fu_407_p2);

    LRupdateHLS_fmul_32ns_32ns_32_2_max_dsp_1_U199 : component LRupdateHLS_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_i8_reg_1877,
        din1 => sumData_xx_read_assi_fu_86,
        ce => ap_const_logic_1,
        dout => grp_fu_411_p2);

    LRupdateHLS_fmul_32ns_32ns_32_2_max_dsp_1_U200 : component LRupdateHLS_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sumData_x_read_assig_fu_78,
        din1 => sumData_x_read_assig_fu_78,
        ce => ap_const_logic_1,
        dout => grp_fu_415_p2);

    LRupdateHLS_fmul_32ns_32ns_32_2_max_dsp_1_U201 : component LRupdateHLS_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_i8_reg_1877,
        din1 => sumData_xy_read_assi_fu_74,
        ce => ap_const_logic_1,
        dout => grp_fu_419_p2);

    LRupdateHLS_fmul_32ns_32ns_32_2_max_dsp_1_U202 : component LRupdateHLS_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sumData_x_read_assig_fu_78,
        din1 => sumData_y_read_assig_fu_82,
        ce => ap_const_logic_1,
        dout => grp_fu_423_p2);

    LRupdateHLS_fmul_32ns_32ns_32_2_max_dsp_1_U203 : component LRupdateHLS_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sumData_y_read_assig_fu_82,
        din1 => sumData_xx_read_assi_fu_86,
        ce => ap_const_logic_1,
        dout => grp_fu_427_p2);

    LRupdateHLS_fmul_32ns_32ns_32_2_max_dsp_1_U204 : component LRupdateHLS_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sumData_x_read_assig_fu_78,
        din1 => sumData_xy_read_assi_fu_74,
        ce => ap_const_logic_1,
        dout => grp_fu_431_p2);

    LRupdateHLS_fdiv_32ns_32ns_32_8_1_U205 : component LRupdateHLS_fdiv_32ns_32ns_32_8_1
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_553,
        din1 => reg_543,
        ce => ap_const_logic_1,
        dout => grp_fu_435_p2);

    LRupdateHLS_fdiv_32ns_32ns_32_8_1_U206 : component LRupdateHLS_fdiv_32ns_32ns_32_8_1
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_562,
        din1 => reg_543,
        ce => ap_const_logic_1,
        dout => grp_fu_439_p2);

    LRupdateHLS_fdiv_32ns_32ns_32_8_1_U207 : component LRupdateHLS_fdiv_32ns_32ns_32_8_1
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_1_i2_reg_1933,
        din1 => reg_570,
        ce => ap_const_logic_1,
        dout => grp_fu_443_p2);

    LRupdateHLS_fdiv_32ns_32ns_32_8_1_U208 : component LRupdateHLS_fdiv_32ns_32ns_32_8_1
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_4_i1_reg_1938,
        din1 => reg_570,
        ce => ap_const_logic_1,
        dout => grp_fu_447_p2);

    LRupdateHLS_uitofp_32ns_32_3_1_U209 : component LRupdateHLS_uitofp_32ns_32_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sumData_n_read_assig_1_fu_90,
        ce => ap_const_logic_1,
        dout => grp_fu_451_p1);

    LRupdateHLS_uitofp_32ns_32_3_1_U210 : component LRupdateHLS_uitofp_32ns_32_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sumData_n_read_assig_fu_70,
        ce => ap_const_logic_1,
        dout => grp_fu_454_p1);

    LRupdateHLS_fcmp_32ns_32ns_1_1_1_U211 : component LRupdateHLS_fcmp_32ns_32ns_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_457_p0,
        din1 => grp_fu_457_p1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_457_p2);

    LRupdateHLS_fcmp_32ns_32ns_1_1_1_U212 : component LRupdateHLS_fcmp_32ns_32ns_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_462_p0,
        din1 => grp_fu_462_p1,
        opcode => grp_fu_462_opcode,
        dout => grp_fu_462_p2);

    LRupdateHLS_fcmp_32ns_32ns_1_1_1_U213 : component LRupdateHLS_fcmp_32ns_32ns_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => reg_543,
        din1 => stubData_RPhi_read_a_reg_264,
        opcode => ap_const_lv5_2,
        dout => tmp_181_fu_467_p2);

    LRupdateHLS_fcmp_32ns_32ns_1_1_1_U214 : component LRupdateHLS_fcmp_32ns_32ns_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => reg_562,
        din1 => stubData_RZ_read_ass_reg_240,
        opcode => ap_const_lv5_2,
        dout => tmp_193_fu_472_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
                    ap_return_0_preg <= grp_fu_435_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
                    ap_return_1_preg <= grp_fu_439_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
                    ap_return_2_preg <= grp_fu_443_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_return_3_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_3_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
                    ap_return_3_preg <= grp_fu_447_p2;
                end if; 
            end if;
        end if;
    end process;


    p_begin2_0_rec_reg_336_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_fu_749_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                p_begin2_0_rec_reg_336 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                p_begin2_0_rec_reg_336 <= p_rec_reg_1767;
            end if; 
        end if;
    end process;

    p_begin_0_rec_reg_217_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
                p_begin_0_rec_reg_217 <= p_rec1_reg_1715;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_begin_0_rec_reg_217 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    ps_reg_324_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_fu_749_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                ps_reg_324 <= ap_const_lv1_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                ps_reg_324 <= ps_1_reg_1827;
            end if; 
        end if;
    end process;

    stubData_Phi_read_as_1_reg_300_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_fu_749_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                stubData_Phi_read_as_1_reg_300 <= ap_const_lv32_7FFFE1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                stubData_Phi_read_as_1_reg_300 <= layerMinPos_Phi_fu_1454_p3;
            end if; 
        end if;
    end process;

    stubData_Phi_read_as_reg_252_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_fu_749_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                stubData_Phi_read_as_reg_252 <= ap_const_lv32_FF7FFFEE;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                stubData_Phi_read_as_reg_252 <= layerMaxPos_Phi_fu_1509_p3;
            end if; 
        end if;
    end process;

    stubData_RPhi_read_a_1_reg_312_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_fu_749_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                stubData_RPhi_read_a_1_reg_312 <= ap_const_lv32_7FFFE1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                stubData_RPhi_read_a_1_reg_312 <= layerMinPos_RPhi_reg_1797;
            end if; 
        end if;
    end process;

    stubData_RPhi_read_a_reg_264_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_fu_749_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                stubData_RPhi_read_a_reg_264 <= ap_const_lv32_FF7FFFEE;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                stubData_RPhi_read_a_reg_264 <= layerMaxPos_RPhi_reg_1802;
            end if; 
        end if;
    end process;

    stubData_RZ_read_ass_1_reg_288_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_fu_749_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                stubData_RZ_read_ass_1_reg_288 <= ap_const_lv32_7FFFE1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                stubData_RZ_read_ass_1_reg_288 <= layerMinPos_RZ_1_reg_1812;
            end if; 
        end if;
    end process;

    stubData_RZ_read_ass_reg_240_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_fu_749_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                stubData_RZ_read_ass_reg_240 <= ap_const_lv32_FF7FFFEE;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                stubData_RZ_read_ass_reg_240 <= layerMaxPos_RZ_1_reg_1807;
            end if; 
        end if;
    end process;

    stubData_Z_read_assi_1_reg_276_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_fu_749_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                stubData_Z_read_assi_1_reg_276 <= ap_const_lv32_7FFFE1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                stubData_Z_read_assi_1_reg_276 <= layerMinPos_Z_1_reg_1822;
            end if; 
        end if;
    end process;

    stubData_Z_read_assi_reg_228_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_fu_749_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                stubData_Z_read_assi_reg_228 <= ap_const_lv32_FF7FFFEE;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                stubData_Z_read_assi_reg_228 <= layerMaxPos_Z_1_reg_1817;
            end if; 
        end if;
    end process;

    sumData_n_read_assig_1_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
                sumData_n_read_assig_1_fu_90 <= phiSums_n_fu_1526_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                sumData_n_read_assig_1_fu_90 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    sumData_n_read_assig_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_reg_1740 = ap_const_lv1_0) and (ps_reg_324 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then 
                sumData_n_read_assig_fu_70 <= zSums_n_fu_1557_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                sumData_n_read_assig_fu_70 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    sumData_x_read_assig_1_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                sumData_x_read_assig_1_fu_98 <= grp_fu_347_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                sumData_x_read_assig_1_fu_98 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    sumData_x_read_assig_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                sumData_x_read_assig_fu_78 <= grp_fu_347_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                sumData_x_read_assig_fu_78 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    sumData_xx_read_assi_1_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
                sumData_xx_read_assi_1_fu_106 <= grp_fu_353_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                sumData_xx_read_assi_1_fu_106 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    sumData_xx_read_assi_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_reg_1740 = ap_const_lv1_0) and (ps_reg_324 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then 
                sumData_xx_read_assi_fu_86 <= grp_fu_353_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                sumData_xx_read_assi_fu_86 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    sumData_xy_read_assi_1_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
                sumData_xy_read_assi_1_fu_94 <= grp_fu_347_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                sumData_xy_read_assi_1_fu_94 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    sumData_xy_read_assi_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_reg_1740 = ap_const_lv1_0) and (ps_reg_324 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then 
                sumData_xy_read_assi_fu_74 <= grp_fu_347_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                sumData_xy_read_assi_fu_74 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    sumData_y_read_assig_1_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                sumData_y_read_assig_1_fu_102 <= grp_fu_353_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                sumData_y_read_assig_1_fu_102 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    sumData_y_read_assig_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                sumData_y_read_assig_fu_82 <= grp_fu_353_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                sumData_y_read_assig_fu_82 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                LinearRegression_stu_426_reg_1735 <= LinearRegression_stubMap_data_second_size_s_q0;
                tmp_i_reg_1740 <= tmp_i_fu_749_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                LinearRegression_stu_434_reg_1788 <= LinearRegression_stubMap_data_second_data_psModule_s_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                layerMaxPos_RPhi_reg_1802 <= layerMaxPos_RPhi_fu_1015_p3;
                layerMaxPos_RZ_1_reg_1807 <= layerMaxPos_RZ_1_fu_1079_p3;
                layerMinPos_RPhi_reg_1797 <= layerMinPos_RPhi_fu_867_p3;
                layerMinPos_RZ_1_reg_1812 <= layerMinPos_RZ_1_fu_1086_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                layerMaxPos_Z_1_reg_1817 <= layerMaxPos_Z_1_fu_1241_p3;
                layerMinPos_Z_1_reg_1822 <= layerMinPos_Z_1_fu_1248_p3;
                ps_1_reg_1827 <= ps_1_fu_1255_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                p_rec1_reg_1715 <= p_rec1_fu_743_p2;
                    tmp_581_reg_1707(9 downto 1) <= tmp_581_fu_732_p2(9 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                p_rec_reg_1767 <= p_rec_fu_777_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                pos_Phi_reg_1832 <= pos_Phi_fu_1363_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state8))) then
                reg_543 <= grp_fu_347_p2;
                reg_553 <= grp_fu_353_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state8))) then
                reg_562 <= grp_fu_361_p2;
                reg_570 <= grp_fu_366_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state10))) then
                reg_577 <= grp_fu_383_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state10))) then
                reg_586 <= grp_fu_387_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then
                tmp_1_i2_reg_1933 <= grp_fu_375_p2;
                tmp_4_i1_reg_1938 <= grp_fu_379_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                tmp_1_i3_reg_1861 <= grp_fu_383_p2;
                tmp_5_i1_reg_1866 <= grp_fu_387_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                tmp_1_i_reg_1851 <= grp_fu_383_p2;
                tmp_5_i_reg_1856 <= grp_fu_387_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then
                tmp_2_i1_reg_1923 <= grp_fu_427_p2;
                tmp_2_i_reg_1893 <= grp_fu_403_p2;
                tmp_3_i1_reg_1928 <= grp_fu_431_p2;
                tmp_3_i_reg_1898 <= grp_fu_407_p2;
                tmp_7_i1_reg_1903 <= grp_fu_411_p2;
                tmp_8_i1_reg_1908 <= grp_fu_415_p2;
                tmp_9_i1_reg_1913 <= grp_fu_419_p2;
                tmp_9_i_reg_1883 <= grp_fu_395_p2;
                tmp_i3_reg_1918 <= grp_fu_423_p2;
                tmp_i_13_reg_1888 <= grp_fu_399_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then
                tmp_i7_reg_1871 <= grp_fu_451_p1;
                tmp_i8_reg_1877 <= grp_fu_454_p1;
            end if;
        end if;
    end process;
    tmp_581_reg_1707(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state34, ps_reg_324, ap_CS_fsm_state2, tmp_s_fu_738_p2, ap_CS_fsm_state3, tmp_i_fu_749_p2, ap_CS_fsm_state4, tmp_81_fu_772_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_s_fu_738_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((tmp_i_fu_749_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state39;
                end if;
            when ap_ST_fsm_state4 => 
                if (((tmp_81_fu_772_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                if (((ps_reg_324 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    LinearRegression_stubMap_data_second_data_phi_s_address0 <= tmp_595_cast_fu_764_p1(9 - 1 downto 0);

    LinearRegression_stubMap_data_second_data_phi_s_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            LinearRegression_stubMap_data_second_data_phi_s_ce0 <= ap_const_logic_1;
        else 
            LinearRegression_stubMap_data_second_data_phi_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    LinearRegression_stubMap_data_second_data_psModule_s_address0 <= tmp_595_cast_fu_764_p1(9 - 1 downto 0);

    LinearRegression_stubMap_data_second_data_psModule_s_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            LinearRegression_stubMap_data_second_data_psModule_s_ce0 <= ap_const_logic_1;
        else 
            LinearRegression_stubMap_data_second_data_psModule_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    LinearRegression_stubMap_data_second_data_r_s_address0 <= tmp_595_cast_fu_764_p1(9 - 1 downto 0);

    LinearRegression_stubMap_data_second_data_r_s_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            LinearRegression_stubMap_data_second_data_r_s_ce0 <= ap_const_logic_1;
        else 
            LinearRegression_stubMap_data_second_data_r_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    LinearRegression_stubMap_data_second_data_z_s_address0 <= tmp_595_cast_fu_764_p1(9 - 1 downto 0);

    LinearRegression_stubMap_data_second_data_z_s_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            LinearRegression_stubMap_data_second_data_z_s_ce0 <= ap_const_logic_1;
        else 
            LinearRegression_stubMap_data_second_data_z_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    LinearRegression_stubMap_data_second_size_s_address0 <= p_begin_0_rec_cast2_fu_703_p1(5 - 1 downto 0);

    LinearRegression_stubMap_data_second_size_s_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            LinearRegression_stubMap_data_second_size_s_ce0 <= ap_const_logic_1;
        else 
            LinearRegression_stubMap_data_second_size_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state55)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state55) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state55)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(grp_fu_435_p2, ap_CS_fsm_state55, ap_return_0_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            ap_return_0 <= grp_fu_435_p2;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_CS_fsm_state55, grp_fu_439_p2, ap_return_1_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            ap_return_1 <= grp_fu_439_p2;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_return_2_assign_proc : process(ap_CS_fsm_state55, grp_fu_443_p2, ap_return_2_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            ap_return_2 <= grp_fu_443_p2;
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;


    ap_return_3_assign_proc : process(ap_CS_fsm_state55, grp_fu_447_p2, ap_return_3_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            ap_return_3 <= grp_fu_447_p2;
        else 
            ap_return_3 <= ap_return_3_preg;
        end if; 
    end process;


    grp_fu_347_opcode_assign_proc : process(ap_CS_fsm_state31, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state34, ps_reg_324, ap_CS_fsm_state36, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state11, ap_CS_fsm_state19, ap_CS_fsm_state44, tmp_81_fu_772_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            grp_fu_347_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state31) or ((tmp_81_fu_772_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ps_reg_324 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state34)))) then 
            grp_fu_347_opcode <= ap_const_lv2_0;
        else 
            grp_fu_347_opcode <= "XX";
        end if; 
    end process;


    grp_fu_347_p0_assign_proc : process(LinearRegression_stubMap_data_second_data_r_s_q0, reg_543, ap_CS_fsm_state31, reg_553, reg_577, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state4, ap_CS_fsm_state5, tmp_1_i_reg_1851, tmp_1_i3_reg_1861, stubData_RZ_read_ass_1_reg_288, stubData_RPhi_read_a_1_reg_312, sumData_x_read_assig_fu_78, sumData_x_read_assig_1_fu_98, ap_CS_fsm_state11, ap_CS_fsm_state19, ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            grp_fu_347_p0 <= reg_577;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_fu_347_p0 <= tmp_1_i3_reg_1861;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_347_p0 <= sumData_x_read_assig_fu_78;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_fu_347_p0 <= tmp_1_i_reg_1851;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_347_p0 <= sumData_x_read_assig_1_fu_98;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_347_p0 <= stubData_RZ_read_ass_1_reg_288;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_347_p0 <= reg_543;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_347_p0 <= reg_553;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_347_p0 <= LinearRegression_stubMap_data_second_data_r_s_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_347_p0 <= stubData_RPhi_read_a_1_reg_312;
        else 
            grp_fu_347_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_347_p1_assign_proc : process(LinearRegression_settings_chosenRofPhi_read, ap_CS_fsm_state31, reg_577, ap_CS_fsm_state28, reg_586, ap_CS_fsm_state29, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state4, ap_CS_fsm_state5, stubData_RZ_read_ass_reg_240, stubData_RPhi_read_a_reg_264, sumData_xy_read_assi_fu_74, sumData_xy_read_assi_1_fu_94, ap_CS_fsm_state11, ap_CS_fsm_state19, ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            grp_fu_347_p1 <= reg_586;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_fu_347_p1 <= sumData_xy_read_assi_fu_74;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_fu_347_p1 <= sumData_xy_read_assi_1_fu_94;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_347_p1 <= stubData_RZ_read_ass_reg_240;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            grp_fu_347_p1 <= reg_577;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_347_p1 <= LinearRegression_settings_chosenRofPhi_read;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_347_p1 <= stubData_RPhi_read_a_reg_264;
        else 
            grp_fu_347_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_353_opcode_assign_proc : process(ap_CS_fsm_state31, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state34, ps_reg_324, ap_CS_fsm_state36, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state11, ap_CS_fsm_state44, tmp_81_fu_772_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            grp_fu_353_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state31) or ((tmp_81_fu_772_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ps_reg_324 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state34)))) then 
            grp_fu_353_opcode <= ap_const_lv2_0;
        else 
            grp_fu_353_opcode <= "XX";
        end if; 
    end process;


    grp_fu_353_p0_assign_proc : process(LinearRegression_stubMap_data_second_data_phi_s_q0, ap_CS_fsm_state31, reg_570, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state4, ap_CS_fsm_state5, tmp_5_i_reg_1856, tmp_5_i1_reg_1866, tmp_9_i_reg_1883, stubData_Z_read_assi_1_reg_276, stubData_Phi_read_as_1_reg_300, sumData_y_read_assig_fu_82, sumData_y_read_assig_1_fu_102, ap_CS_fsm_state11, ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            grp_fu_353_p0 <= tmp_9_i_reg_1883;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_fu_353_p0 <= tmp_5_i1_reg_1866;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_353_p0 <= sumData_y_read_assig_fu_82;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_fu_353_p0 <= tmp_5_i_reg_1856;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_353_p0 <= sumData_y_read_assig_1_fu_102;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_353_p0 <= stubData_Z_read_assi_1_reg_276;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_353_p0 <= reg_570;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_353_p0 <= LinearRegression_stubMap_data_second_data_phi_s_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_353_p0 <= stubData_Phi_read_as_1_reg_300;
        else 
            grp_fu_353_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_353_p1_assign_proc : process(LinearRegression_HTParameter_phiT_read, ap_CS_fsm_state31, ap_CS_fsm_state28, reg_586, ap_CS_fsm_state29, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state4, ap_CS_fsm_state5, tmp_i_13_reg_1888, stubData_Z_read_assi_reg_228, stubData_Phi_read_as_reg_252, sumData_xx_read_assi_fu_86, sumData_xx_read_assi_1_fu_106, ap_CS_fsm_state11, ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            grp_fu_353_p1 <= tmp_i_13_reg_1888;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_fu_353_p1 <= sumData_xx_read_assi_fu_86;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_fu_353_p1 <= sumData_xx_read_assi_1_fu_106;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_353_p1 <= stubData_Z_read_assi_reg_228;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            grp_fu_353_p1 <= reg_586;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_353_p1 <= LinearRegression_HTParameter_phiT_read;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_353_p1 <= stubData_Phi_read_as_reg_252;
        else 
            grp_fu_353_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_361_p0_assign_proc : process(LinearRegression_stubMap_data_second_data_r_s_q0, ap_CS_fsm_state5, tmp_2_i_reg_1893, ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            grp_fu_361_p0 <= tmp_2_i_reg_1893;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_361_p0 <= LinearRegression_stubMap_data_second_data_r_s_q0;
        else 
            grp_fu_361_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_361_p1_assign_proc : process(LinearRegression_settings_chosenRofZ_read, ap_CS_fsm_state5, tmp_3_i_reg_1898, ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            grp_fu_361_p1 <= tmp_3_i_reg_1898;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_361_p1 <= LinearRegression_settings_chosenRofZ_read;
        else 
            grp_fu_361_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_366_p0_assign_proc : process(LinearRegression_stubMap_data_second_data_z_s_q0, ap_CS_fsm_state5, tmp_7_i1_reg_1903, ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            grp_fu_366_p0 <= tmp_7_i1_reg_1903;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_366_p0 <= LinearRegression_stubMap_data_second_data_z_s_q0;
        else 
            grp_fu_366_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_366_p1_assign_proc : process(LinearRegression_HTParameter_zT_read, ap_CS_fsm_state5, tmp_8_i1_reg_1908, ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            grp_fu_366_p1 <= tmp_8_i1_reg_1908;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_366_p1 <= LinearRegression_HTParameter_zT_read;
        else 
            grp_fu_366_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_383_p0_assign_proc : process(reg_543, reg_577, ap_CS_fsm_state29, ap_CS_fsm_state42, ap_CS_fsm_state34, ap_CS_fsm_state9, ap_CS_fsm_state15, tmp_i7_reg_1871, ap_CS_fsm_state32, ap_CS_fsm_state17, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_fu_383_p0 <= tmp_i7_reg_1871;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            grp_fu_383_p0 <= reg_577;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_fu_383_p0 <= reg_543;
        else 
            grp_fu_383_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_383_p1_assign_proc : process(LinearRegression_HTParameter_qOverPt_read, reg_586, ap_CS_fsm_state29, ap_CS_fsm_state42, ap_CS_fsm_state34, ap_CS_fsm_state9, ap_CS_fsm_state15, ap_CS_fsm_state32, sumData_xx_read_assi_1_fu_106, ap_CS_fsm_state17, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_fu_383_p1 <= sumData_xx_read_assi_1_fu_106;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            grp_fu_383_p1 <= reg_586;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            grp_fu_383_p1 <= ap_const_lv32_3F000000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_383_p1 <= ap_const_lv32_40C90FDB;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_383_p1 <= ap_const_lv32_3E22F983;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_383_p1 <= LinearRegression_HTParameter_qOverPt_read;
        else 
            grp_fu_383_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_387_p0_assign_proc : process(reg_553, reg_562, reg_577, ap_CS_fsm_state29, ap_CS_fsm_state42, ap_CS_fsm_state34, ap_CS_fsm_state9, sumData_x_read_assig_1_fu_98, ap_CS_fsm_state32, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_fu_387_p0 <= sumData_x_read_assig_1_fu_98;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            grp_fu_387_p0 <= reg_577;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            grp_fu_387_p0 <= reg_553;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_387_p0 <= reg_562;
        else 
            grp_fu_387_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_387_p1_assign_proc : process(LinearRegression_HTParameter_cotTheta_read, reg_577, ap_CS_fsm_state29, ap_CS_fsm_state42, ap_CS_fsm_state34, ap_CS_fsm_state9, sumData_x_read_assig_1_fu_98, ap_CS_fsm_state32, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_fu_387_p1 <= sumData_x_read_assig_1_fu_98;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            grp_fu_387_p1 <= reg_577;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            grp_fu_387_p1 <= ap_const_lv32_3F000000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_387_p1 <= LinearRegression_HTParameter_cotTheta_read;
        else 
            grp_fu_387_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_457_p0_assign_proc : process(reg_543, reg_553, ap_CS_fsm_state9, ap_CS_fsm_state15, pos_Phi_reg_1832, ap_CS_fsm_state22, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_457_p0 <= pos_Phi_reg_1832;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_457_p0 <= reg_553;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_fu_457_p0 <= reg_543;
        else 
            grp_fu_457_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_457_p1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state15, ap_CS_fsm_state22, ap_CS_fsm_state23, stubData_Z_read_assi_1_reg_276, stubData_Phi_read_as_1_reg_300, stubData_RPhi_read_a_1_reg_312)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_457_p1 <= stubData_Phi_read_as_1_reg_300;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_457_p1 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_457_p1 <= stubData_Z_read_assi_1_reg_276;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_457_p1 <= stubData_RPhi_read_a_1_reg_312;
        else 
            grp_fu_457_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_462_opcode_assign_proc : process(LinearRegression_stu_434_reg_1788, ap_CS_fsm_state9, ap_CS_fsm_state15, ap_CS_fsm_state22, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_462_opcode <= ap_const_lv5_5;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_lv1_1 = LinearRegression_stu_434_reg_1788) and (ap_const_logic_1 = ap_CS_fsm_state15)))) then 
            grp_fu_462_opcode <= ap_const_lv5_2;
        elsif (((ap_const_lv1_1 = LinearRegression_stu_434_reg_1788) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_fu_462_opcode <= ap_const_lv5_4;
        else 
            grp_fu_462_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_462_p0_assign_proc : process(reg_553, reg_562, ap_CS_fsm_state9, ap_CS_fsm_state15, pos_Phi_reg_1832, ap_CS_fsm_state22, ap_CS_fsm_state23, p_0_i_i_i_fu_1312_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_462_p0 <= pos_Phi_reg_1832;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_462_p0 <= p_0_i_i_i_fu_1312_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_462_p0 <= reg_553;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_462_p0 <= reg_562;
        else 
            grp_fu_462_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_462_p1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state15, ap_CS_fsm_state22, ap_CS_fsm_state23, stubData_Z_read_assi_reg_228, stubData_Phi_read_as_reg_252, stubData_RZ_read_ass_1_reg_288)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_462_p1 <= stubData_Phi_read_as_reg_252;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_462_p1 <= ap_const_lv32_40490FDB;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_462_p1 <= stubData_Z_read_assi_reg_228;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_462_p1 <= stubData_RZ_read_ass_1_reg_288;
        else 
            grp_fu_462_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    layerMaxPos_Phi_fu_1509_p3 <= 
        pos_Phi_reg_1832 when (tmp_188_fu_1503_p2(0) = '1') else 
        stubData_Phi_read_as_reg_252;
    layerMaxPos_RPhi_fu_1015_p3 <= 
        reg_543 when (tmp_182_fu_1009_p2(0) = '1') else 
        stubData_RPhi_read_a_reg_264;
    layerMaxPos_RZ_1_fu_1079_p3 <= 
        layerMaxPos_RZ_fu_1071_p3 when (LinearRegression_stu_434_reg_1788(0) = '1') else 
        stubData_RZ_read_ass_reg_240;
    layerMaxPos_RZ_fu_1071_p3 <= 
        reg_562 when (tmp_194_fu_1065_p2(0) = '1') else 
        stubData_RZ_read_ass_reg_240;
    layerMaxPos_Z_1_fu_1241_p3 <= 
        layerMaxPos_Z_fu_1233_p3 when (LinearRegression_stu_434_reg_1788(0) = '1') else 
        stubData_Z_read_assi_reg_228;
    layerMaxPos_Z_fu_1233_p3 <= 
        reg_553 when (tmp_200_fu_1227_p2(0) = '1') else 
        stubData_Z_read_assi_reg_228;
    layerMinPos_Phi_fu_1454_p3 <= 
        pos_Phi_reg_1832 when (tmp_158_fu_1448_p2(0) = '1') else 
        stubData_Phi_read_as_1_reg_300;
    layerMinPos_RPhi_fu_867_p3 <= 
        reg_543 when (tmp_149_fu_861_p2(0) = '1') else 
        stubData_RPhi_read_a_1_reg_312;
    layerMinPos_RZ_1_fu_1086_p3 <= 
        layerMinPos_RZ_fu_959_p3 when (LinearRegression_stu_434_reg_1788(0) = '1') else 
        stubData_RZ_read_ass_1_reg_288;
    layerMinPos_RZ_fu_959_p3 <= 
        reg_562 when (tmp_167_fu_953_p2(0) = '1') else 
        stubData_RZ_read_ass_1_reg_288;
    layerMinPos_Z_1_fu_1248_p3 <= 
        layerMinPos_Z_fu_1177_p3 when (LinearRegression_stu_434_reg_1788(0) = '1') else 
        stubData_Z_read_assi_1_reg_276;
    layerMinPos_Z_fu_1177_p3 <= 
        reg_553 when (tmp_176_fu_1171_p2(0) = '1') else 
        stubData_Z_read_assi_1_reg_276;
    notlhs10_fu_985_p2 <= "0" when (tmp_177_fu_971_p4 = ap_const_lv8_FF) else "1";
    notlhs11_fu_1479_p2 <= "0" when (tmp_183_fu_1465_p4 = ap_const_lv8_FF) else "1";
    notlhs12_fu_1041_p2 <= "0" when (tmp_189_fu_1027_p4 = ap_const_lv8_FF) else "1";
    notlhs13_fu_1203_p2 <= "0" when (tmp_195_fu_1189_p4 = ap_const_lv8_FF) else "1";
    notlhs1_fu_1406_p2 <= "0" when (tmp_150_fu_1374_p4 = ap_const_lv8_FF) else "1";
    notlhs2_fu_1424_p2 <= "0" when (tmp_152_fu_1392_p4 = ap_const_lv8_FF) else "1";
    notlhs3_fu_911_p2 <= "0" when (tmp_159_fu_879_p4 = ap_const_lv8_FF) else "1";
    notlhs4_fu_929_p2 <= "0" when (tmp_161_fu_897_p4 = ap_const_lv8_FF) else "1";
    notlhs5_fu_1129_p2 <= "0" when (tmp_168_fu_1097_p4 = ap_const_lv8_FF) else "1";
    notlhs6_fu_1147_p2 <= "0" when (tmp_170_fu_1115_p4 = ap_const_lv8_FF) else "1";
    notlhs7_fu_819_p2 <= "0" when (tmp_141_fu_787_p4 = ap_const_lv8_FF) else "1";
    notlhs8_fu_1339_p2 <= "0" when (tmp_136_fu_1325_p4 = ap_const_lv8_FF) else "1";
    notlhs9_fu_837_p2 <= "0" when (tmp_143_fu_805_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_1278_p2 <= "0" when (tmp_fu_1264_p4 = ap_const_lv8_FF) else "1";
    notrhs10_fu_1135_p2 <= "1" when (tmp_620_fu_1107_p1 = ap_const_lv23_0) else "0";
    notrhs11_fu_1153_p2 <= "1" when (tmp_621_fu_1125_p1 = ap_const_lv23_0) else "0";
    notrhs12_fu_991_p2 <= "1" when (tmp_622_fu_981_p1 = ap_const_lv23_0) else "0";
    notrhs13_fu_1485_p2 <= "1" when (tmp_623_fu_1475_p1 = ap_const_lv23_0) else "0";
    notrhs14_fu_1047_p2 <= "1" when (tmp_624_fu_1037_p1 = ap_const_lv23_0) else "0";
    notrhs15_fu_1209_p2 <= "1" when (tmp_625_fu_1199_p1 = ap_const_lv23_0) else "0";
    notrhs3_fu_825_p2 <= "1" when (tmp_614_fu_797_p1 = ap_const_lv23_0) else "0";
    notrhs4_fu_843_p2 <= "1" when (tmp_615_fu_815_p1 = ap_const_lv23_0) else "0";
    notrhs5_fu_1412_p2 <= "1" when (tmp_616_fu_1384_p1 = ap_const_lv23_0) else "0";
    notrhs6_fu_1430_p2 <= "1" when (tmp_617_fu_1402_p1 = ap_const_lv23_0) else "0";
    notrhs7_fu_917_p2 <= "1" when (tmp_618_fu_889_p1 = ap_const_lv23_0) else "0";
    notrhs8_fu_935_p2 <= "1" when (tmp_619_fu_907_p1 = ap_const_lv23_0) else "0";
    notrhs9_fu_1345_p2 <= "1" when (tmp_613_fu_1335_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_1284_p2 <= "1" when (tmp_612_fu_1274_p1 = ap_const_lv23_0) else "0";
    p_0_i_i_i_fu_1312_p3 <= 
        tmp_i_i_i_fu_1308_p1 when (tmp_135_fu_1296_p2(0) = '1') else 
        reg_543;
    p_0_i_i_i_to_int_fu_1321_p1 <= p_0_i_i_i_fu_1312_p3;
    p_begin_0_rec_cast2_fu_703_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_begin_0_rec_reg_217),64));
    p_rec1_fu_743_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(p_begin_0_rec_reg_217));
    p_rec_fu_777_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(p_begin2_0_rec_reg_336));
    p_shl1_cast_fu_724_p3 <= (tmp_610_fu_720_p1 & ap_const_lv1_0);
    p_shl_cast_fu_712_p3 <= (tmp_609_fu_708_p1 & ap_const_lv3_0);
    phi1_assign_to_int_fu_1260_p1 <= reg_543;
    phiSums_n_fu_1526_p2 <= std_logic_vector(unsigned(sumData_n_read_assig_1_fu_90) + unsigned(ap_const_lv32_1));
    pos_Phi_fu_1363_p3 <= 
        reg_543 when (tmp_140_fu_1357_p2(0) = '1') else 
        grp_fu_347_p2;
    pos_Phi_to_int_fu_1371_p1 <= pos_Phi_reg_1832;
    pos_RPhi_to_int_fu_783_p1 <= reg_543;
    pos_RZ_to_int_fu_875_p1 <= reg_562;
    pos_Z_to_int_fu_1093_p1 <= reg_553;
    ps_1_fu_1255_p2 <= (ps_reg_324 or LinearRegression_stu_434_reg_1788);
    stubData_Phi_read_as_2_fu_1388_p1 <= stubData_Phi_read_as_1_reg_300;
    stubData_Phi_read_as_3_fu_1461_p1 <= stubData_Phi_read_as_reg_252;
    stubData_RPhi_read_a_2_fu_801_p1 <= stubData_RPhi_read_a_1_reg_312;
    stubData_RPhi_read_a_3_fu_967_p1 <= stubData_RPhi_read_a_reg_264;
    stubData_RZ_read_ass_2_fu_893_p1 <= stubData_RZ_read_ass_1_reg_288;
    stubData_RZ_read_ass_3_fu_1023_p1 <= stubData_RZ_read_ass_reg_240;
    stubData_Z_read_assi_2_fu_1111_p1 <= stubData_Z_read_assi_1_reg_276;
    stubData_Z_read_assi_3_fu_1185_p1 <= stubData_Z_read_assi_reg_228;
    tmp_133_fu_1290_p2 <= (notrhs_fu_1284_p2 or notlhs_fu_1278_p2);
    tmp_135_fu_1296_p2 <= (tmp_133_fu_1290_p2 and grp_fu_457_p2);
    tmp_136_fu_1325_p4 <= p_0_i_i_i_to_int_fu_1321_p1(30 downto 23);
    tmp_138_fu_1351_p2 <= (notrhs9_fu_1345_p2 or notlhs8_fu_1339_p2);
    tmp_140_fu_1357_p2 <= (tmp_138_fu_1351_p2 and grp_fu_462_p2);
    tmp_141_fu_787_p4 <= pos_RPhi_to_int_fu_783_p1(30 downto 23);
    tmp_143_fu_805_p4 <= stubData_RPhi_read_a_2_fu_801_p1(30 downto 23);
    tmp_145_fu_831_p2 <= (notrhs3_fu_825_p2 or notlhs7_fu_819_p2);
    tmp_146_fu_849_p2 <= (notrhs4_fu_843_p2 or notlhs9_fu_837_p2);
    tmp_147_fu_855_p2 <= (tmp_146_fu_849_p2 and tmp_145_fu_831_p2);
    tmp_149_fu_861_p2 <= (tmp_147_fu_855_p2 and grp_fu_457_p2);
    tmp_150_fu_1374_p4 <= pos_Phi_to_int_fu_1371_p1(30 downto 23);
    tmp_152_fu_1392_p4 <= stubData_Phi_read_as_2_fu_1388_p1(30 downto 23);
    tmp_154_fu_1418_p2 <= (notrhs5_fu_1412_p2 or notlhs1_fu_1406_p2);
    tmp_155_fu_1436_p2 <= (notrhs6_fu_1430_p2 or notlhs2_fu_1424_p2);
    tmp_156_fu_1442_p2 <= (tmp_155_fu_1436_p2 and tmp_154_fu_1418_p2);
    tmp_158_fu_1448_p2 <= (tmp_156_fu_1442_p2 and grp_fu_457_p2);
    tmp_159_fu_879_p4 <= pos_RZ_to_int_fu_875_p1(30 downto 23);
    tmp_161_fu_897_p4 <= stubData_RZ_read_ass_2_fu_893_p1(30 downto 23);
    tmp_163_fu_923_p2 <= (notrhs7_fu_917_p2 or notlhs3_fu_911_p2);
    tmp_164_fu_941_p2 <= (notrhs8_fu_935_p2 or notlhs4_fu_929_p2);
    tmp_165_fu_947_p2 <= (tmp_164_fu_941_p2 and tmp_163_fu_923_p2);
    tmp_167_fu_953_p2 <= (tmp_165_fu_947_p2 and grp_fu_462_p2);
    tmp_168_fu_1097_p4 <= pos_Z_to_int_fu_1093_p1(30 downto 23);
    tmp_170_fu_1115_p4 <= stubData_Z_read_assi_2_fu_1111_p1(30 downto 23);
    tmp_172_fu_1141_p2 <= (notrhs10_fu_1135_p2 or notlhs5_fu_1129_p2);
    tmp_173_fu_1159_p2 <= (notrhs11_fu_1153_p2 or notlhs6_fu_1147_p2);
    tmp_174_fu_1165_p2 <= (tmp_173_fu_1159_p2 and tmp_172_fu_1141_p2);
    tmp_176_fu_1171_p2 <= (tmp_174_fu_1165_p2 and grp_fu_457_p2);
    tmp_177_fu_971_p4 <= stubData_RPhi_read_a_3_fu_967_p1(30 downto 23);
    tmp_179_fu_997_p2 <= (notrhs12_fu_991_p2 or notlhs10_fu_985_p2);
    tmp_180_fu_1003_p2 <= (tmp_179_fu_997_p2 and tmp_145_fu_831_p2);
    tmp_182_fu_1009_p2 <= (tmp_181_fu_467_p2 and tmp_180_fu_1003_p2);
    tmp_183_fu_1465_p4 <= stubData_Phi_read_as_3_fu_1461_p1(30 downto 23);
    tmp_185_fu_1491_p2 <= (notrhs13_fu_1485_p2 or notlhs11_fu_1479_p2);
    tmp_186_fu_1497_p2 <= (tmp_185_fu_1491_p2 and tmp_154_fu_1418_p2);
    tmp_188_fu_1503_p2 <= (tmp_186_fu_1497_p2 and grp_fu_462_p2);
    tmp_189_fu_1027_p4 <= stubData_RZ_read_ass_3_fu_1023_p1(30 downto 23);
    tmp_191_fu_1053_p2 <= (notrhs14_fu_1047_p2 or notlhs12_fu_1041_p2);
    tmp_192_fu_1059_p2 <= (tmp_191_fu_1053_p2 and tmp_163_fu_923_p2);
    tmp_194_fu_1065_p2 <= (tmp_193_fu_472_p2 and tmp_192_fu_1059_p2);
    tmp_195_fu_1189_p4 <= stubData_Z_read_assi_3_fu_1185_p1(30 downto 23);
    tmp_197_fu_1215_p2 <= (notrhs15_fu_1209_p2 or notlhs13_fu_1203_p2);
    tmp_198_fu_1221_p2 <= (tmp_197_fu_1215_p2 and tmp_172_fu_1141_p2);
    tmp_200_fu_1227_p2 <= (tmp_198_fu_1221_p2 and grp_fu_462_p2);
    tmp_581_fu_732_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_712_p3) + unsigned(p_shl1_cast_fu_724_p3));
    tmp_582_fu_759_p2 <= std_logic_vector(unsigned(tmp_581_reg_1707) + unsigned(tmp_611_fu_755_p1));
    tmp_595_cast_fu_764_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_582_fu_759_p2),64));
    tmp_609_fu_708_p1 <= p_begin_0_rec_reg_217(7 - 1 downto 0);
    tmp_610_fu_720_p1 <= p_begin_0_rec_reg_217(9 - 1 downto 0);
    tmp_611_fu_755_p1 <= p_begin2_0_rec_reg_336(10 - 1 downto 0);
    tmp_612_fu_1274_p1 <= phi1_assign_to_int_fu_1260_p1(23 - 1 downto 0);
    tmp_613_fu_1335_p1 <= p_0_i_i_i_to_int_fu_1321_p1(23 - 1 downto 0);
    tmp_614_fu_797_p1 <= pos_RPhi_to_int_fu_783_p1(23 - 1 downto 0);
    tmp_615_fu_815_p1 <= stubData_RPhi_read_a_2_fu_801_p1(23 - 1 downto 0);
    tmp_616_fu_1384_p1 <= pos_Phi_to_int_fu_1371_p1(23 - 1 downto 0);
    tmp_617_fu_1402_p1 <= stubData_Phi_read_as_2_fu_1388_p1(23 - 1 downto 0);
    tmp_618_fu_889_p1 <= pos_RZ_to_int_fu_875_p1(23 - 1 downto 0);
    tmp_619_fu_907_p1 <= stubData_RZ_read_ass_2_fu_893_p1(23 - 1 downto 0);
    tmp_620_fu_1107_p1 <= pos_Z_to_int_fu_1093_p1(23 - 1 downto 0);
    tmp_621_fu_1125_p1 <= stubData_Z_read_assi_2_fu_1111_p1(23 - 1 downto 0);
    tmp_622_fu_981_p1 <= stubData_RPhi_read_a_3_fu_967_p1(23 - 1 downto 0);
    tmp_623_fu_1475_p1 <= stubData_Phi_read_as_3_fu_1461_p1(23 - 1 downto 0);
    tmp_624_fu_1037_p1 <= stubData_RZ_read_ass_3_fu_1023_p1(23 - 1 downto 0);
    tmp_625_fu_1199_p1 <= stubData_Z_read_assi_3_fu_1185_p1(23 - 1 downto 0);
    tmp_81_fu_772_p2 <= "1" when (p_begin2_0_rec_reg_336 = LinearRegression_stu_426_reg_1735) else "0";
    tmp_fu_1264_p4 <= phi1_assign_to_int_fu_1260_p1(30 downto 23);
    tmp_i_fu_749_p2 <= "1" when (LinearRegression_stubMap_data_second_size_s_q0 = ap_const_lv32_0) else "0";
    tmp_i_i_i_fu_1308_p1 <= tmp_neg_i_i_i_fu_1302_p2;
    tmp_neg_i_i_i_fu_1302_p2 <= (phi1_assign_to_int_fu_1260_p1 xor ap_const_lv32_80000000);
    tmp_s_fu_738_p2 <= "1" when (p_begin_0_rec_reg_217 = LinearRegression_stubMap_size_read) else "0";
    zSums_n_fu_1557_p2 <= std_logic_vector(unsigned(sumData_n_read_assig_fu_70) + unsigned(ap_const_lv32_1));
end behav;
