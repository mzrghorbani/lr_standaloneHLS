-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sinh_cosh_range_redu is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    d : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of sinh_cosh_range_redu is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv39_0 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000000";
    constant ap_const_lv39_26A41F61C0 : STD_LOGIC_VECTOR (38 downto 0) := "010011010100100000111110110000111000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_42B2D4FC : STD_LOGIC_VECTOR (31 downto 0) := "01000010101100101101010011111100";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv8_73 : STD_LOGIC_VECTOR (7 downto 0) := "01110011";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv31_7F800000 : STD_LOGIC_VECTOR (30 downto 0) := "1111111100000000000000000000000";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv6_30 : STD_LOGIC_VECTOR (5 downto 0) := "110000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_7F : STD_LOGIC_VECTOR (6 downto 0) := "1111111";
    constant ap_const_lv8_7E : STD_LOGIC_VECTOR (7 downto 0) := "01111110";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv7_7E : STD_LOGIC_VECTOR (6 downto 0) := "1111110";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_7B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111011";
    constant ap_const_lv25_1FFFFFF : STD_LOGIC_VECTOR (24 downto 0) := "1111111111111111111111111";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_FFFFFFE8 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111101000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv39_7FFFFFFFFF : STD_LOGIC_VECTOR (38 downto 0) := "111111111111111111111111111111111111111";
    constant ap_const_lv32_FFFFFFE7 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111100111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal cordic_hyperb_table_s_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal cordic_hyperb_table_s_ce0 : STD_LOGIC;
    signal cordic_hyperb_table_s_q0 : STD_LOGIC_VECTOR (123 downto 0);
    signal p_Result_41_fu_287_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_41_reg_1399 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_344_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_reg_1404 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_1408 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_356_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_1412 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_9_fu_440_p3 : STD_LOGIC_VECTOR (45 downto 0);
    signal r_V_9_reg_1416 : STD_LOGIC_VECTOR (45 downto 0);
    signal ret_i_i6_fu_459_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_i_i4_fu_471_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_big_mult_v3small_fu_243_ap_return : STD_LOGIC_VECTOR (84 downto 0);
    signal p_Val2_12_reg_1431 : STD_LOGIC_VECTOR (84 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_big_mult_v3small_fu_243_ap_ready : STD_LOGIC;
    signal grp_big_mult_v3small_fu_243_ap_done : STD_LOGIC;
    signal ret_V_6_reg_1436 : STD_LOGIC_VECTOR (7 downto 0);
    signal prod_dec_V_reg_1442 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp_z_V_fu_506_p1 : STD_LOGIC_VECTOR (38 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_big_mult_v3small_1_fu_248_ap_ready : STD_LOGIC;
    signal grp_big_mult_v3small_1_fu_248_ap_done : STD_LOGIC;
    signal k1_fu_520_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal k1_reg_1455 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tx_V_fu_614_p3 : STD_LOGIC_VECTOR (38 downto 0);
    signal tx_V_reg_1460 : STD_LOGIC_VECTOR (38 downto 0);
    signal exitcond_i_fu_514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ty_V_fu_654_p3 : STD_LOGIC_VECTOR (38 downto 0);
    signal ty_V_reg_1465 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp_V_fu_667_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp_V_reg_1475 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp_V_3_fu_673_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp_V_3_reg_1480 : STD_LOGIC_VECTOR (38 downto 0);
    signal two_p_plus_k_fu_726_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal two_p_minus_k_fu_742_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tz_V_fu_774_p3 : STD_LOGIC_VECTOR (38 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_2_fu_782_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_1502 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal p_Result_46_fu_788_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_46_reg_1507 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_6_reg_1512 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp_58_reg_1517 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_59_fu_1019_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_59_reg_1522 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_28_fu_1023_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_reg_1527 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_49_fu_1029_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_49_reg_1532 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_7_reg_1537 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp_70_reg_1542 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_71_fu_1260_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_71_reg_1547 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_fu_1312_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_reg_1552 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal y_fu_1367_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_reg_1557 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_253_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sinhkln2_reg_1562 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fu_257_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal coshkln2_reg_1567 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_261_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_50_reg_1572 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_fu_265_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_51_reg_1577 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_big_mult_v3small_fu_243_ap_start : STD_LOGIC;
    signal grp_big_mult_v3small_fu_243_ap_idle : STD_LOGIC;
    signal grp_big_mult_v3small_1_fu_248_ap_start : STD_LOGIC;
    signal grp_big_mult_v3small_1_fu_248_ap_idle : STD_LOGIC;
    signal grp_big_mult_v3small_1_fu_248_ap_return : STD_LOGIC_VECTOR (77 downto 0);
    signal ap_phi_mux_p_Val2_4_phi_fu_188_p4 : STD_LOGIC_VECTOR (38 downto 0);
    signal p_Val2_4_reg_185 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp_V_16_reg_195 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp_V_17_reg_207 : STD_LOGIC_VECTOR (38 downto 0);
    signal k1_0_i_reg_219 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_s_out_write_assign_phi_fu_233_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal s_out_write_assign_reg_230 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_i_i5_fu_1389_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_big_mult_v3small_fu_243_ap_start_reg : STD_LOGIC := '0';
    signal grp_big_mult_v3small_1_fu_248_ap_start_reg : STD_LOGIC := '0';
    signal tmp_24_fu_662_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_253_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_253_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_fu_257_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_257_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_9_fu_269_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_274_p1 : STD_LOGIC_VECTOR (38 downto 0);
    signal p_Val2_8_fu_283_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_309_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Result_42_fu_313_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_14_fu_295_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_15_fu_305_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_269_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal t_f_V_fu_362_p4 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_i_i_cast5_fu_376_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_fu_380_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_i_fu_394_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_fu_386_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_cast_fu_400_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_fu_404_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_2_cast_fu_412_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_cast_32_fu_420_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal r_V_4_fu_424_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal t_f_V_1_cast_fu_372_p1 : STD_LOGIC_VECTOR (45 downto 0);
    signal tmp_i_31_fu_416_p1 : STD_LOGIC_VECTOR (45 downto 0);
    signal r_V_4_cast_fu_430_p1 : STD_LOGIC_VECTOR (45 downto 0);
    signal r_V_5_fu_434_p2 : STD_LOGIC_VECTOR (45 downto 0);
    signal p_Result_44_fu_449_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_43_fu_463_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ssdm_int_V_write_ass_fu_496_p4 : STD_LOGIC_VECTOR (36 downto 0);
    signal p_lshr_f_cast_fu_526_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal k1_0_i_cast_fu_510_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_1_cast_fu_536_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_19_fu_540_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_fu_546_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal isNeg_1_fu_552_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_560_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_3_fu_566_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_1_cast_fu_574_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_fu_578_p1 : STD_LOGIC_VECTOR (38 downto 0);
    signal r_V_fu_582_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal r_V_1_fu_588_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal r_V_10_fu_594_p3 : STD_LOGIC_VECTOR (38 downto 0);
    signal grp_fu_274_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_1_i_fu_602_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal ret_V_i7_fu_608_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal r_V_2_fu_622_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal r_V_3_fu_628_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal r_V_11_fu_634_p3 : STD_LOGIC_VECTOR (38 downto 0);
    signal ret_V_1_i1_fu_642_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal ret_V_i_fu_648_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp_49_fu_689_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_48_fu_684_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_67_cast_fu_698_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal two_p_minus_s_exp_V_fu_704_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal two_p_plus_s_exp_V_fu_679_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_52_fu_716_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal two_p_minus_s_exp_V_s_fu_712_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_53_fu_732_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_52_fu_748_p4 : STD_LOGIC_VECTOR (36 downto 0);
    signal z_s_V_fu_758_p1 : STD_LOGIC_VECTOR (38 downto 0);
    signal ret_V_i1_fu_768_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal ret_V_4_i_fu_762_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp_V_18_fu_796_p3 : STD_LOGIC_VECTOR (38 downto 0);
    signal p_Result_s_fu_803_p4 : STD_LOGIC_VECTOR (38 downto 0);
    signal p_Result_47_fu_813_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_821_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal l_fu_829_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_833_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_fu_839_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_34_fu_845_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_35_fu_861_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_37_fu_865_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_42_fu_871_p1 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp_43_fu_875_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal p_Result_27_fu_881_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal icmp_fu_855_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_887_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_56_fu_899_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_5_fu_913_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev_fu_907_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_921_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_fu_893_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_927_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_947_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_fu_953_p1 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp_23_fu_963_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_fu_969_p1 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp_16_fu_941_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_fu_957_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp_26_fu_973_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal p_in1_fu_979_p3 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp_15_fu_933_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_42_cast_fu_991_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal m_cast_fu_987_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal m_fu_995_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_V_19_fu_1037_p3 : STD_LOGIC_VECTOR (38 downto 0);
    signal p_Result_9_fu_1044_p4 : STD_LOGIC_VECTOR (38 downto 0);
    signal p_Result_50_fu_1054_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_29_fu_1062_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal l_1_fu_1070_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_fu_1074_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_1_fu_1080_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_63_fu_1086_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_64_fu_1102_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_65_fu_1106_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_66_fu_1112_p1 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp_67_fu_1116_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal p_Result_31_fu_1122_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal icmp1_fu_1096_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_fu_1128_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_69_fu_1140_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_32_fu_1154_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev1_fu_1148_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_fu_1162_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_1_fu_1134_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_1168_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_38_fu_1188_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_39_fu_1194_p1 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp_41_fu_1204_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_44_fu_1210_p1 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp_36_fu_1182_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_40_fu_1198_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp_45_fu_1214_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal p_in_fu_1220_p3 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp_33_fu_1174_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_62_cast_fu_1232_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal m_4_cast_fu_1228_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal m_2_fu_1236_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_7_fu_1274_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_cast_cast_fu_1267_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Repl2_7_trunc_fu_1279_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_8_cast_fu_1264_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_1285_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_48_fu_1292_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_60_fu_1304_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_fu_1308_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_1329_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_cast_cast_fu_1322_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Repl2_10_trunc_fu_1334_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_9_cast_fu_1319_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_fu_1340_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_51_fu_1347_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_72_fu_1359_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_47_fu_1363_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_22_fu_1374_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_73_fu_1378_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Result_54_fu_1382_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_253_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);

    component big_mult_v3small IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        a_V : IN STD_LOGIC_VECTOR (45 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (84 downto 0) );
    end component;


    component big_mult_v3small_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        a_V : IN STD_LOGIC_VECTOR (38 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (77 downto 0) );
    end component;


    component LRupdateHLS_faddfsub_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component LRupdateHLS_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component LRupdateHLS_fmul_32ns_32ns_32_2_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component LRupdateHLS_fcmp_32ns_32ns_1_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component sinh_cosh_range_redu_cordic_hyperb_table_s IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (123 downto 0) );
    end component;



begin
    cordic_hyperb_table_s_U : component sinh_cosh_range_redu_cordic_hyperb_table_s
    generic map (
        DataWidth => 124,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => cordic_hyperb_table_s_address0,
        ce0 => cordic_hyperb_table_s_ce0,
        q0 => cordic_hyperb_table_s_q0);

    grp_big_mult_v3small_fu_243 : component big_mult_v3small
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_big_mult_v3small_fu_243_ap_start,
        ap_done => grp_big_mult_v3small_fu_243_ap_done,
        ap_idle => grp_big_mult_v3small_fu_243_ap_idle,
        ap_ready => grp_big_mult_v3small_fu_243_ap_ready,
        a_V => r_V_9_reg_1416,
        ap_return => grp_big_mult_v3small_fu_243_ap_return);

    grp_big_mult_v3small_1_fu_248 : component big_mult_v3small_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_big_mult_v3small_1_fu_248_ap_start,
        ap_done => grp_big_mult_v3small_1_fu_248_ap_done,
        ap_idle => grp_big_mult_v3small_1_fu_248_ap_idle,
        ap_ready => grp_big_mult_v3small_1_fu_248_ap_ready,
        a_V => prod_dec_V_reg_1442,
        ap_return => grp_big_mult_v3small_1_fu_248_ap_return);

    LRupdateHLS_faddfsub_32ns_32ns_32_4_full_dsp_1_U3 : component LRupdateHLS_faddfsub_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_253_p0,
        din1 => grp_fu_253_p1,
        opcode => grp_fu_253_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_253_p2);

    LRupdateHLS_fadd_32ns_32ns_32_4_full_dsp_1_U4 : component LRupdateHLS_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_257_p0,
        din1 => grp_fu_257_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_257_p2);

    LRupdateHLS_fmul_32ns_32ns_32_2_max_dsp_1_U5 : component LRupdateHLS_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => coshkln2_reg_1567,
        din1 => y_reg_1557,
        ce => ap_const_logic_1,
        dout => grp_fu_261_p2);

    LRupdateHLS_fmul_32ns_32ns_32_2_max_dsp_1_U6 : component LRupdateHLS_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sinhkln2_reg_1562,
        din1 => x_reg_1552,
        ce => ap_const_logic_1,
        dout => grp_fu_265_p2);

    LRupdateHLS_fcmp_32ns_32ns_1_1_1_U7 : component LRupdateHLS_fcmp_32ns_32ns_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => tmp_9_fu_269_p0,
        din1 => ap_const_lv32_42B2D4FC,
        opcode => ap_const_lv5_2,
        dout => tmp_9_fu_269_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                    ap_return_preg <= ap_phi_mux_s_out_write_assign_phi_fu_233_p8;
                end if; 
            end if;
        end if;
    end process;


    grp_big_mult_v3small_1_fu_248_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_big_mult_v3small_1_fu_248_ap_start_reg <= ap_const_logic_0;
            else
                if (((grp_big_mult_v3small_fu_243_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_big_mult_v3small_1_fu_248_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_big_mult_v3small_1_fu_248_ap_ready = ap_const_logic_1)) then 
                    grp_big_mult_v3small_1_fu_248_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_big_mult_v3small_fu_243_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_big_mult_v3small_fu_243_ap_start_reg <= ap_const_logic_0;
            else
                if (((tmp_1_fu_356_p2 = ap_const_lv1_0) and (tmp_s_fu_350_p2 = ap_const_lv1_0) and (tmp_11_fu_344_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    grp_big_mult_v3small_fu_243_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_big_mult_v3small_fu_243_ap_ready = ap_const_logic_1)) then 
                    grp_big_mult_v3small_fu_243_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    k1_0_i_reg_219_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                k1_0_i_reg_219 <= k1_reg_1455;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_big_mult_v3small_1_fu_248_ap_done = ap_const_logic_1))) then 
                k1_0_i_reg_219 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    p_Val2_4_reg_185_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                p_Val2_4_reg_185 <= tz_V_fu_774_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_big_mult_v3small_1_fu_248_ap_done = ap_const_logic_1))) then 
                p_Val2_4_reg_185 <= tmp_z_V_fu_506_p1;
            end if; 
        end if;
    end process;

    s_out_write_assign_reg_230_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_1_fu_356_p2 = ap_const_lv1_1) and (tmp_s_fu_350_p2 = ap_const_lv1_0) and (tmp_11_fu_344_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                s_out_write_assign_reg_230 <= d;
            elsif (((tmp_1_reg_1412 = ap_const_lv1_0) and (tmp_s_reg_1408 = ap_const_lv1_0) and (tmp_11_reg_1404 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                s_out_write_assign_reg_230 <= ret_i_i5_fu_1389_p1;
            elsif (((tmp_s_fu_350_p2 = ap_const_lv1_1) and (tmp_11_fu_344_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                s_out_write_assign_reg_230 <= ret_i_i6_fu_459_p1;
            elsif (((tmp_11_fu_344_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                s_out_write_assign_reg_230 <= ret_i_i4_fu_471_p1;
            end if; 
        end if;
    end process;

    tmp_V_16_reg_195_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                tmp_V_16_reg_195 <= ty_V_reg_1465;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_big_mult_v3small_1_fu_248_ap_done = ap_const_logic_1))) then 
                tmp_V_16_reg_195 <= ap_const_lv39_0;
            end if; 
        end if;
    end process;

    tmp_V_17_reg_207_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                tmp_V_17_reg_207 <= tx_V_reg_1460;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_big_mult_v3small_1_fu_248_ap_done = ap_const_logic_1))) then 
                tmp_V_17_reg_207 <= ap_const_lv39_26A41F61C0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                coshkln2_reg_1567 <= grp_fu_257_p2;
                sinhkln2_reg_1562 <= grp_fu_253_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                k1_reg_1455 <= k1_fu_520_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                m_6_reg_1512 <= m_fu_995_p2(39 downto 1);
                m_7_reg_1537 <= m_2_fu_1236_p2(39 downto 1);
                p_Result_46_reg_1507 <= tmp_V_17_reg_207(38 downto 38);
                p_Result_49_reg_1532 <= tmp_V_16_reg_195(38 downto 38);
                tmp_28_reg_1527 <= tmp_28_fu_1023_p2;
                tmp_2_reg_1502 <= tmp_2_fu_782_p2;
                tmp_58_reg_1517 <= m_fu_995_p2(25 downto 25);
                tmp_59_reg_1522 <= tmp_59_fu_1019_p1;
                tmp_70_reg_1542 <= m_2_fu_1236_p2(25 downto 25);
                tmp_71_reg_1547 <= tmp_71_fu_1260_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                p_Result_41_reg_1399 <= p_Val2_8_fu_283_p1(31 downto 31);
                tmp_11_reg_1404 <= tmp_11_fu_344_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_big_mult_v3small_fu_243_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                p_Val2_12_reg_1431 <= grp_big_mult_v3small_fu_243_ap_return;
                prod_dec_V_reg_1442 <= grp_big_mult_v3small_fu_243_ap_return(76 downto 38);
                ret_V_6_reg_1436 <= grp_big_mult_v3small_fu_243_ap_return(84 downto 77);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_1_fu_356_p2 = ap_const_lv1_0) and (tmp_s_fu_350_p2 = ap_const_lv1_0) and (tmp_11_fu_344_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                r_V_9_reg_1416 <= r_V_9_fu_440_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_s_fu_350_p2 = ap_const_lv1_0) and (tmp_11_fu_344_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                tmp_1_reg_1412 <= tmp_1_fu_356_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                tmp_50_reg_1572 <= grp_fu_261_p2;
                tmp_51_reg_1577 <= grp_fu_265_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_fu_514_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                tmp_V_3_reg_1480 <= tmp_V_3_fu_673_p2;
                tmp_V_reg_1475 <= tmp_V_fu_667_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_11_fu_344_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                tmp_s_reg_1408 <= tmp_s_fu_350_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_fu_514_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                tx_V_reg_1460 <= tx_V_fu_614_p3;
                ty_V_reg_1465 <= ty_V_fu_654_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                x_reg_1552 <= x_fu_1312_p3;
                y_reg_1557 <= y_fu_1367_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, tmp_11_fu_344_p2, tmp_s_fu_350_p2, tmp_1_fu_356_p2, ap_CS_fsm_state2, grp_big_mult_v3small_fu_243_ap_done, ap_CS_fsm_state3, grp_big_mult_v3small_1_fu_248_ap_done, ap_CS_fsm_state4, exitcond_i_fu_514_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and ((tmp_11_fu_344_p2 = ap_const_lv1_1) or ((tmp_1_fu_356_p2 = ap_const_lv1_1) or (tmp_s_fu_350_p2 = ap_const_lv1_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                elsif (((tmp_1_fu_356_p2 = ap_const_lv1_0) and (tmp_s_fu_350_p2 = ap_const_lv1_0) and (tmp_11_fu_344_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_big_mult_v3small_fu_243_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_big_mult_v3small_1_fu_248_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((exitcond_i_fu_514_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;
    a_1_fu_1134_p2 <= (tmp_31_fu_1128_p2 and icmp1_fu_1096_p2);
    a_fu_893_p2 <= (tmp_12_fu_887_p2 and icmp_fu_855_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_p_Val2_4_phi_fu_188_p4 <= p_Val2_4_reg_185;

    ap_phi_mux_s_out_write_assign_phi_fu_233_p8_assign_proc : process(tmp_11_reg_1404, tmp_s_reg_1408, tmp_1_reg_1412, s_out_write_assign_reg_230, ret_i_i5_fu_1389_p1, ap_CS_fsm_state14)
    begin
        if (((tmp_1_reg_1412 = ap_const_lv1_0) and (tmp_s_reg_1408 = ap_const_lv1_0) and (tmp_11_reg_1404 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            ap_phi_mux_s_out_write_assign_phi_fu_233_p8 <= ret_i_i5_fu_1389_p1;
        else 
            ap_phi_mux_s_out_write_assign_phi_fu_233_p8 <= s_out_write_assign_reg_230;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_phi_mux_s_out_write_assign_phi_fu_233_p8, ap_CS_fsm_state14, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            ap_return <= ap_phi_mux_s_out_write_assign_phi_fu_233_p8;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    cordic_hyperb_table_s_address0 <= tmp_24_fu_662_p1(7 - 1 downto 0);

    cordic_hyperb_table_s_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            cordic_hyperb_table_s_ce0 <= ap_const_logic_1;
        else 
            cordic_hyperb_table_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_i_fu_514_p2 <= "1" when (k1_0_i_reg_219 = ap_const_lv6_30) else "0";
    grp_big_mult_v3small_1_fu_248_ap_start <= grp_big_mult_v3small_1_fu_248_ap_start_reg;
    grp_big_mult_v3small_fu_243_ap_start <= grp_big_mult_v3small_fu_243_ap_start_reg;

    grp_fu_253_opcode_assign_proc : process(ap_CS_fsm_state4, exitcond_i_fu_514_p2, ap_CS_fsm_state11)
    begin
        if (((exitcond_i_fu_514_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            grp_fu_253_opcode <= ap_const_lv2_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_253_opcode <= ap_const_lv2_0;
        else 
            grp_fu_253_opcode <= "XX";
        end if; 
    end process;


    grp_fu_253_p0_assign_proc : process(ap_CS_fsm_state4, two_p_plus_k_fu_726_p1, tmp_50_reg_1572, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_253_p0 <= tmp_50_reg_1572;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_253_p0 <= two_p_plus_k_fu_726_p1;
        else 
            grp_fu_253_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_253_p1_assign_proc : process(ap_CS_fsm_state4, two_p_minus_k_fu_742_p1, tmp_51_reg_1577, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_253_p1 <= tmp_51_reg_1577;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_253_p1 <= two_p_minus_k_fu_742_p1;
        else 
            grp_fu_253_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_257_p0 <= p_Result_52_fu_716_p4;
    grp_fu_257_p1 <= p_Result_53_fu_732_p4;

    grp_fu_274_p1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_phi_mux_p_Val2_4_phi_fu_188_p4, p_Val2_4_reg_185)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_274_p1 <= p_Val2_4_reg_185;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_274_p1 <= ap_phi_mux_p_Val2_4_phi_fu_188_p4;
        else 
            grp_fu_274_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_274_p3 <= grp_fu_274_p1(38 downto 38);
    icmp1_fu_1096_p2 <= "1" when (signed(tmp_63_fu_1086_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_fu_855_p2 <= "1" when (signed(tmp_34_fu_845_p4) > signed(ap_const_lv31_0)) else "0";
    isNeg_1_fu_552_p3 <= k_fu_546_p2(6 downto 6);
    isNeg_fu_386_p3 <= sh_assign_fu_380_p2(8 downto 8);
    k1_0_i_cast_fu_510_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k1_0_i_reg_219),7));
    k1_fu_520_p2 <= std_logic_vector(unsigned(k1_0_i_reg_219) + unsigned(ap_const_lv6_1));
        k_1_cast_fu_574_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(k_3_fu_566_p3),32));

    k_3_fu_566_p3 <= 
        tmp_20_fu_560_p2 when (isNeg_1_fu_552_p3(0) = '1') else 
        k_fu_546_p2;
    k_fu_546_p2 <= std_logic_vector(signed(tmp_19_fu_540_p2) + signed(ap_const_lv7_1));
    l_1_fu_1070_p1 <= tmp_29_fu_1062_p3(32 - 1 downto 0);
    l_fu_829_p1 <= tmp_4_fu_821_p3(32 - 1 downto 0);
    lsb_index_1_fu_1080_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFE8) + signed(tmp_30_fu_1074_p2));
    lsb_index_fu_839_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFE8) + signed(tmp_5_fu_833_p2));
    m_2_fu_1236_p2 <= std_logic_vector(unsigned(tmp_62_cast_fu_1232_p1) + unsigned(m_4_cast_fu_1228_p1));
    m_4_cast_fu_1228_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_in_fu_1220_p3),40));
    m_8_cast_fu_1264_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_6_reg_1512),64));
    m_9_cast_fu_1319_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_7_reg_1537),64));
    m_cast_fu_987_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_in1_fu_979_p3),40));
    m_fu_995_p2 <= std_logic_vector(unsigned(tmp_42_cast_fu_991_p1) + unsigned(m_cast_fu_987_p1));
    notlhs_fu_326_p2 <= "0" when (tmp_V_14_fu_295_p4 = ap_const_lv8_FF) else "1";
    notrhs_fu_332_p2 <= "1" when (tmp_V_15_fu_305_p1 = ap_const_lv23_0) else "0";
    p_Repl2_10_trunc_fu_1334_p2 <= std_logic_vector(unsigned(tmp_14_fu_1329_p2) + unsigned(tmp_12_cast_cast_fu_1322_p3));
    p_Repl2_7_trunc_fu_1279_p2 <= std_logic_vector(unsigned(tmp_7_fu_1274_p2) + unsigned(tmp_5_cast_cast_fu_1267_p3));
    p_Result_27_fu_881_p2 <= (tmp_V_18_fu_796_p3 and tmp_43_fu_875_p2);
    p_Result_31_fu_1122_p2 <= (tmp_V_19_fu_1037_p3 and tmp_67_fu_1116_p2);
    p_Result_32_fu_1154_p3 <= tmp_V_19_fu_1037_p3(to_integer(unsigned(lsb_index_1_fu_1080_p2)) downto to_integer(unsigned(lsb_index_1_fu_1080_p2))) when (to_integer(unsigned(lsb_index_1_fu_1080_p2))>= 0 and to_integer(unsigned(lsb_index_1_fu_1080_p2))<=38) else "-";
    p_Result_41_fu_287_p3 <= p_Val2_8_fu_283_p1(31 downto 31);
    p_Result_42_fu_313_p3 <= (ap_const_lv1_0 & tmp_fu_309_p1);
    p_Result_43_fu_463_p3 <= (p_Result_41_fu_287_p3 & ap_const_lv31_7F800000);
    p_Result_44_fu_449_p4 <= ((p_Result_41_fu_287_p3 & ap_const_lv8_FF) & tmp_V_15_fu_305_p1);
    p_Result_46_fu_788_p3 <= tmp_V_17_reg_207(38 downto 38);
    p_Result_47_fu_813_p3 <= (ap_const_lv25_1FFFFFF & p_Result_s_fu_803_p4);
    p_Result_48_fu_1292_p5 <= (m_8_cast_fu_1264_p1(63 downto 32) & tmp_8_fu_1285_p3 & m_8_cast_fu_1264_p1(22 downto 0));
    p_Result_49_fu_1029_p3 <= tmp_V_16_reg_195(38 downto 38);
    p_Result_50_fu_1054_p3 <= (ap_const_lv25_1FFFFFF & p_Result_9_fu_1044_p4);
    p_Result_51_fu_1347_p5 <= (m_9_cast_fu_1319_p1(63 downto 32) & tmp_46_fu_1340_p3 & m_9_cast_fu_1319_p1(22 downto 0));
    p_Result_52_fu_716_p4 <= ((ap_const_lv1_0 & two_p_plus_s_exp_V_fu_679_p2) & ap_const_lv23_0);
    p_Result_53_fu_732_p4 <= ((ap_const_lv1_0 & two_p_minus_s_exp_V_s_fu_712_p1) & ap_const_lv23_0);
    p_Result_54_fu_1382_p3 <= (p_Result_41_reg_1399 & tmp_73_fu_1378_p1);
    p_Result_5_fu_913_p3 <= tmp_V_18_fu_796_p3(to_integer(unsigned(lsb_index_fu_839_p2)) downto to_integer(unsigned(lsb_index_fu_839_p2))) when (to_integer(unsigned(lsb_index_fu_839_p2))>= 0 and to_integer(unsigned(lsb_index_fu_839_p2))<=38) else "-";
    
    p_Result_9_fu_1044_p4_proc : process(tmp_V_19_fu_1037_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(39+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(39+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(39 - 1 downto 0);
    variable p_Result_9_fu_1044_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(39 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(39 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(39 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_26(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := tmp_V_19_fu_1037_p3;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(39-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(39-1-unsigned(ap_const_lv32_26(6-1 downto 0)));
            for p_Result_9_fu_1044_p4_i in 0 to 39-1 loop
                v0_cpy(p_Result_9_fu_1044_p4_i) := tmp_V_19_fu_1037_p3(39-1-p_Result_9_fu_1044_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(39-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_9_fu_1044_p4 <= resvalue(39-1 downto 0);
    end process;

    
    p_Result_s_fu_803_p4_proc : process(tmp_V_18_fu_796_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(39+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(39+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(39 - 1 downto 0);
    variable p_Result_s_fu_803_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(39 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(39 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(39 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_26(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := tmp_V_18_fu_796_p3;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(39-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(39-1-unsigned(ap_const_lv32_26(6-1 downto 0)));
            for p_Result_s_fu_803_p4_i in 0 to 39-1 loop
                v0_cpy(p_Result_s_fu_803_p4_i) := tmp_V_18_fu_796_p3(39-1-p_Result_s_fu_803_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(39-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_s_fu_803_p4 <= resvalue(39-1 downto 0);
    end process;

    p_Val2_22_fu_1374_p1 <= grp_fu_253_p2;
    p_Val2_8_fu_283_p1 <= d;
    p_in1_fu_979_p3 <= 
        tmp_22_fu_957_p2 when (tmp_16_fu_941_p2(0) = '1') else 
        tmp_26_fu_973_p2;
    p_in_fu_1220_p3 <= 
        tmp_40_fu_1198_p2 when (tmp_36_fu_1182_p2(0) = '1') else 
        tmp_45_fu_1214_p2;
    p_lshr_f_cast_fu_526_p4 <= k1_0_i_reg_219(5 downto 2);
    r_V_10_fu_594_p3 <= 
        r_V_fu_582_p2 when (isNeg_1_fu_552_p3(0) = '1') else 
        r_V_1_fu_588_p2;
    r_V_11_fu_634_p3 <= 
        r_V_2_fu_622_p2 when (isNeg_1_fu_552_p3(0) = '1') else 
        r_V_3_fu_628_p2;
    r_V_1_fu_588_p2 <= std_logic_vector(shift_right(signed(tmp_V_16_reg_195),to_integer(unsigned('0' & tmp_21_fu_578_p1(31-1 downto 0)))));
    r_V_2_fu_622_p2 <= std_logic_vector(shift_left(unsigned(tmp_V_17_reg_207),to_integer(unsigned('0' & tmp_21_fu_578_p1(31-1 downto 0)))));
    r_V_3_fu_628_p2 <= std_logic_vector(shift_right(signed(tmp_V_17_reg_207),to_integer(unsigned('0' & tmp_21_fu_578_p1(31-1 downto 0)))));
    r_V_4_cast_fu_430_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_4_fu_424_p2),46));
    r_V_4_fu_424_p2 <= std_logic_vector(shift_right(unsigned(t_f_V_fu_362_p4),to_integer(unsigned('0' & tmp_i_cast_32_fu_420_p1(31-1 downto 0)))));
    r_V_5_fu_434_p2 <= std_logic_vector(shift_left(unsigned(t_f_V_1_cast_fu_372_p1),to_integer(unsigned('0' & tmp_i_31_fu_416_p1(31-1 downto 0)))));
    r_V_9_fu_440_p3 <= 
        r_V_4_cast_fu_430_p1 when (isNeg_fu_386_p3(0) = '1') else 
        r_V_5_fu_434_p2;
    r_V_fu_582_p2 <= std_logic_vector(shift_left(unsigned(tmp_V_16_reg_195),to_integer(unsigned('0' & tmp_21_fu_578_p1(31-1 downto 0)))));
    ret_V_1_i1_fu_642_p2 <= std_logic_vector(unsigned(tmp_V_16_reg_195) - unsigned(r_V_11_fu_634_p3));
    ret_V_1_i_fu_602_p2 <= std_logic_vector(unsigned(tmp_V_17_reg_207) - unsigned(r_V_10_fu_594_p3));
    ret_V_4_i_fu_762_p2 <= std_logic_vector(unsigned(p_Val2_4_reg_185) - unsigned(z_s_V_fu_758_p1));
    ret_V_i1_fu_768_p2 <= std_logic_vector(unsigned(z_s_V_fu_758_p1) + unsigned(p_Val2_4_reg_185));
    ret_V_i7_fu_608_p2 <= std_logic_vector(unsigned(r_V_10_fu_594_p3) + unsigned(tmp_V_17_reg_207));
    ret_V_i_fu_648_p2 <= std_logic_vector(unsigned(r_V_11_fu_634_p3) + unsigned(tmp_V_16_reg_195));
    ret_i_i4_fu_471_p1 <= p_Result_43_fu_463_p3;
    ret_i_i5_fu_1389_p1 <= p_Result_54_fu_1382_p3;
    ret_i_i6_fu_459_p1 <= p_Result_44_fu_449_p4;
    rev1_fu_1148_p2 <= (tmp_69_fu_1140_p3 xor ap_const_lv1_1);
    rev_fu_907_p2 <= (tmp_56_fu_899_p3 xor ap_const_lv1_1);
        sh_assign_2_cast_fu_412_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_404_p3),32));

    sh_assign_fu_380_p2 <= std_logic_vector(unsigned(tmp_i_i_cast5_fu_376_p1) + unsigned(ap_const_lv9_181));
    ssdm_int_V_write_ass_fu_496_p4 <= grp_big_mult_v3small_1_fu_248_ap_return(77 downto 41);
    t_f_V_1_cast_fu_372_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_f_V_fu_362_p4),46));
    t_f_V_fu_362_p4 <= ((ap_const_lv1_1 & tmp_V_15_fu_305_p1) & ap_const_lv16_0);
    tmp_10_fu_1168_p2 <= (tmp_32_fu_1162_p2 or a_1_fu_1134_p2);
    tmp_11_fu_344_p2 <= (tmp_9_fu_269_p2 and tmp_6_fu_338_p2);
    tmp_12_cast_cast_fu_1322_p3 <= 
        ap_const_lv8_7F when (tmp_70_reg_1542(0) = '1') else 
        ap_const_lv8_7E;
    tmp_12_fu_887_p2 <= "0" when (p_Result_27_fu_881_p2 = ap_const_lv39_0) else "1";
    tmp_13_fu_921_p2 <= (rev_fu_907_p2 and p_Result_5_fu_913_p3);
    tmp_14_fu_1329_p2 <= std_logic_vector(unsigned(ap_const_lv8_2) - unsigned(tmp_71_reg_1547));
    tmp_15_fu_933_p3 <= (ap_const_lv31_0 & tmp_3_fu_927_p2);
    tmp_16_fu_941_p2 <= "1" when (signed(lsb_index_fu_839_p2) > signed(ap_const_lv32_0)) else "0";
    tmp_17_fu_947_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFE7) + signed(tmp_5_fu_833_p2));
    tmp_18_fu_953_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_fu_947_p2),39));
    tmp_19_fu_540_p2 <= std_logic_vector(unsigned(k1_0_i_cast_fu_510_p1) - unsigned(tmp_1_cast_fu_536_p1));
    tmp_1_cast_fu_536_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_lshr_f_cast_fu_526_p4),7));
    tmp_1_fu_356_p2 <= "1" when (unsigned(tmp_V_14_fu_295_p4) < unsigned(ap_const_lv8_73)) else "0";
    tmp_20_fu_560_p2 <= (tmp_19_fu_540_p2 xor ap_const_lv7_7F);
    tmp_21_fu_578_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_1_cast_fu_574_p1),39));
    tmp_22_fu_957_p2 <= std_logic_vector(shift_right(unsigned(tmp_V_18_fu_796_p3),to_integer(unsigned('0' & tmp_18_fu_953_p1(31-1 downto 0)))));
    tmp_23_fu_963_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(tmp_5_fu_833_p2));
        tmp_24_fu_662_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_19_fu_540_p2),64));

    tmp_25_fu_969_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_23_fu_963_p2),39));
    tmp_26_fu_973_p2 <= std_logic_vector(shift_left(unsigned(tmp_V_18_fu_796_p3),to_integer(unsigned('0' & tmp_25_fu_969_p1(31-1 downto 0)))));
    tmp_27_fu_1308_p1 <= tmp_60_fu_1304_p1;
    tmp_28_fu_1023_p2 <= "1" when (tmp_V_16_reg_195 = ap_const_lv39_0) else "0";
    
    tmp_29_fu_1062_p3_proc : process(p_Result_50_fu_1054_p3)
    begin
        tmp_29_fu_1062_p3 <= std_logic_vector(to_unsigned(64, 64));
        for i in 0 to 64 - 1 loop
            if p_Result_50_fu_1054_p3(i) = '1' then
                tmp_29_fu_1062_p3 <= std_logic_vector(to_unsigned(i,64));
                exit;
            end if;
        end loop;
    end process;

    tmp_2_fu_782_p2 <= "1" when (tmp_V_17_reg_207 = ap_const_lv39_0) else "0";
    tmp_30_fu_1074_p2 <= std_logic_vector(unsigned(ap_const_lv32_27) - unsigned(l_1_fu_1070_p1));
    tmp_31_fu_1128_p2 <= "0" when (p_Result_31_fu_1122_p2 = ap_const_lv39_0) else "1";
    tmp_32_fu_1162_p2 <= (rev1_fu_1148_p2 and p_Result_32_fu_1154_p3);
    tmp_33_fu_1174_p3 <= (ap_const_lv31_0 & tmp_10_fu_1168_p2);
    tmp_34_fu_845_p4 <= lsb_index_fu_839_p2(31 downto 1);
    tmp_35_fu_861_p1 <= tmp_5_fu_833_p2(6 - 1 downto 0);
    tmp_36_fu_1182_p2 <= "1" when (signed(lsb_index_1_fu_1080_p2) > signed(ap_const_lv32_0)) else "0";
    tmp_37_fu_865_p2 <= std_logic_vector(unsigned(ap_const_lv6_0) - unsigned(tmp_35_fu_861_p1));
    tmp_38_fu_1188_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFE7) + signed(tmp_30_fu_1074_p2));
    tmp_39_fu_1194_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_38_fu_1188_p2),39));
    tmp_3_fu_927_p2 <= (tmp_13_fu_921_p2 or a_fu_893_p2);
    tmp_40_fu_1198_p2 <= std_logic_vector(shift_right(unsigned(tmp_V_19_fu_1037_p3),to_integer(unsigned('0' & tmp_39_fu_1194_p1(31-1 downto 0)))));
    tmp_41_fu_1204_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(tmp_30_fu_1074_p2));
    tmp_42_cast_fu_991_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_933_p3),40));
    tmp_42_fu_871_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_37_fu_865_p2),39));
    tmp_43_fu_875_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv39_7FFFFFFFFF),to_integer(unsigned('0' & tmp_42_fu_871_p1(31-1 downto 0)))));
    tmp_44_fu_1210_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_41_fu_1204_p2),39));
    tmp_45_fu_1214_p2 <= std_logic_vector(shift_left(unsigned(tmp_V_19_fu_1037_p3),to_integer(unsigned('0' & tmp_44_fu_1210_p1(31-1 downto 0)))));
    tmp_46_fu_1340_p3 <= (p_Result_49_reg_1532 & p_Repl2_10_trunc_fu_1334_p2);
    tmp_47_fu_1363_p1 <= tmp_72_fu_1359_p1;
    tmp_48_fu_684_p2 <= "1" when (unsigned(ret_V_6_reg_1436) > unsigned(ap_const_lv8_7E)) else "0";
    tmp_49_fu_689_p4 <= p_Val2_12_reg_1431(83 downto 77);
    
    tmp_4_fu_821_p3_proc : process(p_Result_47_fu_813_p3)
    begin
        tmp_4_fu_821_p3 <= std_logic_vector(to_unsigned(64, 64));
        for i in 0 to 64 - 1 loop
            if p_Result_47_fu_813_p3(i) = '1' then
                tmp_4_fu_821_p3 <= std_logic_vector(to_unsigned(i,64));
                exit;
            end if;
        end loop;
    end process;

    tmp_52_fu_748_p4 <= cordic_hyperb_table_s_q0(123 downto 87);
    tmp_56_fu_899_p3 <= lsb_index_fu_839_p2(31 downto 31);
    tmp_59_fu_1019_p1 <= tmp_4_fu_821_p3(8 - 1 downto 0);
    tmp_5_cast_cast_fu_1267_p3 <= 
        ap_const_lv8_7F when (tmp_58_reg_1517(0) = '1') else 
        ap_const_lv8_7E;
    tmp_5_fu_833_p2 <= std_logic_vector(unsigned(ap_const_lv32_27) - unsigned(l_fu_829_p1));
    tmp_60_fu_1304_p1 <= p_Result_48_fu_1292_p5(32 - 1 downto 0);
    tmp_62_cast_fu_1232_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_33_fu_1174_p3),40));
    tmp_63_fu_1086_p4 <= lsb_index_1_fu_1080_p2(31 downto 1);
    tmp_64_fu_1102_p1 <= tmp_30_fu_1074_p2(6 - 1 downto 0);
    tmp_65_fu_1106_p2 <= std_logic_vector(unsigned(ap_const_lv6_0) - unsigned(tmp_64_fu_1102_p1));
    tmp_66_fu_1112_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_65_fu_1106_p2),39));
    tmp_67_cast_fu_698_p2 <= std_logic_vector(signed(ap_const_lv7_7E) - signed(tmp_49_fu_689_p4));
    tmp_67_fu_1116_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv39_7FFFFFFFFF),to_integer(unsigned('0' & tmp_66_fu_1112_p1(31-1 downto 0)))));
    tmp_69_fu_1140_p3 <= lsb_index_1_fu_1080_p2(31 downto 31);
    tmp_6_fu_338_p2 <= (notrhs_fu_332_p2 or notlhs_fu_326_p2);
    tmp_71_fu_1260_p1 <= tmp_29_fu_1062_p3(8 - 1 downto 0);
    tmp_72_fu_1359_p1 <= p_Result_51_fu_1347_p5(32 - 1 downto 0);
    tmp_73_fu_1378_p1 <= p_Val2_22_fu_1374_p1(31 - 1 downto 0);
    tmp_7_fu_1274_p2 <= std_logic_vector(unsigned(ap_const_lv8_2) - unsigned(tmp_59_reg_1522));
    tmp_8_fu_1285_p3 <= (p_Result_46_reg_1507 & p_Repl2_7_trunc_fu_1279_p2);
    tmp_9_fu_269_p0 <= p_Result_42_fu_313_p3;
    tmp_V_14_fu_295_p4 <= p_Val2_8_fu_283_p1(30 downto 23);
    tmp_V_15_fu_305_p1 <= p_Val2_8_fu_283_p1(23 - 1 downto 0);
    tmp_V_18_fu_796_p3 <= 
        tmp_V_reg_1475 when (p_Result_46_fu_788_p3(0) = '1') else 
        tmp_V_17_reg_207;
    tmp_V_19_fu_1037_p3 <= 
        tmp_V_3_reg_1480 when (p_Result_49_fu_1029_p3(0) = '1') else 
        tmp_V_16_reg_195;
    tmp_V_3_fu_673_p2 <= std_logic_vector(unsigned(ap_const_lv39_0) - unsigned(tmp_V_16_reg_195));
    tmp_V_fu_667_p2 <= std_logic_vector(unsigned(ap_const_lv39_0) - unsigned(tmp_V_17_reg_207));
    tmp_fu_309_p1 <= p_Val2_8_fu_283_p1(31 - 1 downto 0);
    tmp_i_31_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_2_cast_fu_412_p1),46));
    tmp_i_cast_32_fu_420_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_2_cast_fu_412_p1),40));
        tmp_i_cast_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_i_fu_394_p2),9));

    tmp_i_fu_394_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_V_14_fu_295_p4));
    tmp_i_i_cast5_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_14_fu_295_p4),9));
    tmp_s_fu_350_p2 <= "1" when (tmp_V_14_fu_295_p4 = ap_const_lv8_FF) else "0";
    tmp_z_V_fu_506_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ssdm_int_V_write_ass_fu_496_p4),39));
    two_p_minus_k_fu_742_p1 <= p_Result_53_fu_732_p4;
    two_p_minus_s_exp_V_fu_704_p3 <= 
        ap_const_lv7_0 when (tmp_48_fu_684_p2(0) = '1') else 
        tmp_67_cast_fu_698_p2;
    two_p_minus_s_exp_V_s_fu_712_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(two_p_minus_s_exp_V_fu_704_p3),8));
    two_p_plus_k_fu_726_p1 <= p_Result_52_fu_716_p4;
    two_p_plus_s_exp_V_fu_679_p2 <= std_logic_vector(unsigned(ap_const_lv8_7E) + unsigned(ret_V_6_reg_1436));
    tx_V_fu_614_p3 <= 
        ret_V_1_i_fu_602_p2 when (grp_fu_274_p3(0) = '1') else 
        ret_V_i7_fu_608_p2;
    ty_V_fu_654_p3 <= 
        ret_V_1_i1_fu_642_p2 when (grp_fu_274_p3(0) = '1') else 
        ret_V_i_fu_648_p2;
    tz_V_fu_774_p3 <= 
        ret_V_i1_fu_768_p2 when (grp_fu_274_p3(0) = '1') else 
        ret_V_4_i_fu_762_p2;
    ush_fu_404_p3 <= 
        tmp_i_cast_fu_400_p1 when (isNeg_fu_386_p3(0) = '1') else 
        sh_assign_fu_380_p2;
    x_fu_1312_p3 <= 
        ap_const_lv32_0 when (tmp_2_reg_1502(0) = '1') else 
        tmp_27_fu_1308_p1;
    y_fu_1367_p3 <= 
        ap_const_lv32_0 when (tmp_28_reg_1527(0) = '1') else 
        tmp_47_fu_1363_p1;
    z_s_V_fu_758_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_52_fu_748_p4),39));
end behav;
