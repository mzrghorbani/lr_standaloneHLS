-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity big_mult_v3small is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_V : IN STD_LOGIC_VECTOR (45 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (84 downto 0) );
end;


architecture behav of big_mult_v3small is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv6_10 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_const_lv6_2D : STD_LOGIC_VECTOR (5 downto 0) := "101101";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv46_3FFFFFFFFFFF : STD_LOGIC_VECTOR (45 downto 0) := "1111111111111111111111111111111111111111111111";
    constant ap_const_lv56_5C551D94AE : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000101110001010101000111011001010010101110";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv7_54 : STD_LOGIC_VECTOR (6 downto 0) := "1010100";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv85_1FFFFFFFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (84 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv85_0 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_4_fu_175_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_4_reg_663 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal p_Result_60_fu_293_p2 : STD_LOGIC_VECTOR (45 downto 0);
    signal p_Result_60_reg_668 : STD_LOGIC_VECTOR (45 downto 0);
    signal exitcond1_fu_169_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pp_2_V_1_fu_328_p3 : STD_LOGIC_VECTOR (55 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal pp_2_V_3_fu_344_p3 : STD_LOGIC_VECTOR (55 downto 0);
    signal pp_2_V_5_fu_352_p3 : STD_LOGIC_VECTOR (55 downto 0);
    signal pps_2_V_1_fu_418_p3 : STD_LOGIC_VECTOR (55 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond2_fu_360_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pps_2_V_2_fu_426_p3 : STD_LOGIC_VECTOR (55 downto 0);
    signal i_3_fu_434_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_61_fu_446_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal p_Result_59_fu_632_p2 : STD_LOGIC_VECTOR (84 downto 0);
    signal exitcond_fu_440_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pp_V_2_s_reg_64 : STD_LOGIC_VECTOR (55 downto 0);
    signal pp_V_1_s_reg_76 : STD_LOGIC_VECTOR (55 downto 0);
    signal pps_0_V_reg_88 : STD_LOGIC_VECTOR (55 downto 0);
    signal i_reg_100 : STD_LOGIC_VECTOR (1 downto 0);
    signal pps_V_1_s_reg_112 : STD_LOGIC_VECTOR (55 downto 0);
    signal pps_V_2_s_reg_124 : STD_LOGIC_VECTOR (55 downto 0);
    signal i_1_reg_136 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_Val2_s_reg_147 : STD_LOGIC_VECTOR (84 downto 0);
    signal i_2_reg_158 : STD_LOGIC_VECTOR (1 downto 0);
    signal Lo_assign_fu_187_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_181_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_56_fu_197_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal Ui_fu_203_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_211_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_722_fu_226_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_724_fu_238_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_721_fu_217_p4 : STD_LOGIC_VECTOR (45 downto 0);
    signal tmp_723_fu_232_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_725_fu_244_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_727_fu_259_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_728_fu_267_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_726_fu_252_p3 : STD_LOGIC_VECTOR (45 downto 0);
    signal tmp_729_fu_273_p1 : STD_LOGIC_VECTOR (45 downto 0);
    signal tmp_730_fu_277_p1 : STD_LOGIC_VECTOR (45 downto 0);
    signal tmp_731_fu_281_p2 : STD_LOGIC_VECTOR (45 downto 0);
    signal tmp_732_fu_287_p2 : STD_LOGIC_VECTOR (45 downto 0);
    signal pp_0_V_fu_302_p0 : STD_LOGIC_VECTOR (45 downto 0);
    signal sel_tmp_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pp_0_V_fu_302_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal sel_tmp2_fu_322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pp_2_V_fu_314_p3 : STD_LOGIC_VECTOR (55 downto 0);
    signal pp_2_V_2_fu_336_p3 : STD_LOGIC_VECTOR (55 downto 0);
    signal cond_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_642_fu_372_p4 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp_643_fu_382_p4 : STD_LOGIC_VECTOR (38 downto 0);
    signal p_v_fu_392_p3 : STD_LOGIC_VECTOR (38 downto 0);
    signal r_V_fu_400_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal pp_V_load_1_phi_fu_404_p3 : STD_LOGIC_VECTOR (55 downto 0);
    signal pps_1_V_fu_412_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_735_fu_452_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal Li_fu_456_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal Li_cast1_fu_466_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal Ui_1_fu_474_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal cond1_fu_484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_736_fu_490_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_737_fu_494_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_738_fu_498_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal Li_cast_fu_470_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Ui_1_cast_fu_480_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_740_fu_516_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_739_fu_510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_741_fu_520_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_742_fu_524_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_743_fu_530_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_745_fu_546_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_744_fu_538_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_746_fu_554_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_V_fu_506_p1 : STD_LOGIC_VECTOR (84 downto 0);
    signal tmp_747_fu_560_p1 : STD_LOGIC_VECTOR (84 downto 0);
    signal tmp_750_fu_572_p2 : STD_LOGIC_VECTOR (84 downto 0);
    signal tmp_751_fu_578_p4 : STD_LOGIC_VECTOR (84 downto 0);
    signal tmp_748_fu_564_p1 : STD_LOGIC_VECTOR (84 downto 0);
    signal tmp_749_fu_568_p1 : STD_LOGIC_VECTOR (84 downto 0);
    signal tmp_753_fu_596_p2 : STD_LOGIC_VECTOR (84 downto 0);
    signal tmp_754_fu_602_p2 : STD_LOGIC_VECTOR (84 downto 0);
    signal p_demorgan_fu_608_p2 : STD_LOGIC_VECTOR (84 downto 0);
    signal tmp_755_fu_614_p2 : STD_LOGIC_VECTOR (84 downto 0);
    signal tmp_752_fu_588_p3 : STD_LOGIC_VECTOR (84 downto 0);
    signal tmp_756_fu_620_p2 : STD_LOGIC_VECTOR (84 downto 0);
    signal tmp_757_fu_626_p2 : STD_LOGIC_VECTOR (84 downto 0);
    signal tmp_734_fu_638_p1 : STD_LOGIC_VECTOR (50 downto 0);
    signal p_Result_s_fu_642_p5 : STD_LOGIC_VECTOR (84 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal pp_0_V_fu_302_p00 : STD_LOGIC_VECTOR (55 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv85_0;
            else
                if (((exitcond_fu_440_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_return_preg <= p_Result_s_fu_642_p5;
                end if; 
            end if;
        end if;
    end process;


    i_1_reg_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_169_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_1_reg_136 <= ap_const_lv2_1;
            elsif (((exitcond2_fu_360_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_1_reg_136 <= i_3_fu_434_p2;
            end if; 
        end if;
    end process;

    i_2_reg_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_360_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_2_reg_158 <= ap_const_lv2_0;
            elsif (((exitcond_fu_440_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i_2_reg_158 <= tmp_61_fu_446_p2;
            end if; 
        end if;
    end process;

    i_reg_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_reg_100 <= i_4_reg_663;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_100 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_4_reg_663 <= i_4_fu_175_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_169_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                p_Result_60_reg_668 <= p_Result_60_fu_293_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_440_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                p_Val2_s_reg_147 <= p_Result_59_fu_632_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                pp_V_1_s_reg_76 <= pp_2_V_3_fu_344_p3;
                pp_V_2_s_reg_64 <= pp_2_V_1_fu_328_p3;
                pps_0_V_reg_88 <= pp_2_V_5_fu_352_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_360_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                pps_V_1_s_reg_112 <= pps_2_V_1_fu_418_p3;
                pps_V_2_s_reg_124 <= pps_2_V_2_fu_426_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_169_p2, ap_CS_fsm_state4, exitcond2_fu_360_p2, ap_CS_fsm_state5, exitcond_fu_440_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond1_fu_169_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((exitcond2_fu_360_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((exitcond_fu_440_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    Li_cast1_fu_466_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Li_fu_456_p4),6));
    Li_cast_fu_470_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Li_fu_456_p4),32));
    Li_fu_456_p4 <= ((tmp_735_fu_452_p1 & ap_const_lv2_0) & i_2_reg_158);
    Lo_assign_fu_187_p4 <= ((i_reg_100 & ap_const_lv2_0) & i_reg_100);
    Ui_1_cast_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Ui_1_fu_474_p2),32));
    Ui_1_fu_474_p2 <= std_logic_vector(unsigned(ap_const_lv6_10) + unsigned(Li_cast1_fu_466_p1));
    Ui_fu_203_p3 <= 
        ap_const_lv6_2D when (tmp_s_fu_181_p2(0) = '1') else 
        tmp_56_fu_197_p2;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5, exitcond_fu_440_p2)
    begin
        if ((((exitcond_fu_440_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5, exitcond_fu_440_p2)
    begin
        if (((exitcond_fu_440_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_state5, exitcond_fu_440_p2, p_Result_s_fu_642_p5, ap_return_preg)
    begin
        if (((exitcond_fu_440_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_return <= p_Result_s_fu_642_p5;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    cond1_fu_484_p2 <= "1" when (i_2_reg_158 = ap_const_lv2_0) else "0";
    cond_fu_366_p2 <= "1" when (i_1_reg_136 = ap_const_lv2_1) else "0";
    exitcond1_fu_169_p2 <= "1" when (i_reg_100 = ap_const_lv2_3) else "0";
    exitcond2_fu_360_p2 <= "1" when (i_1_reg_136 = ap_const_lv2_3) else "0";
    exitcond_fu_440_p2 <= "1" when (i_2_reg_158 = ap_const_lv2_2) else "0";
    i_3_fu_434_p2 <= std_logic_vector(unsigned(i_1_reg_136) + unsigned(ap_const_lv2_1));
    i_4_fu_175_p2 <= std_logic_vector(unsigned(i_reg_100) + unsigned(ap_const_lv2_1));
    p_Result_59_fu_632_p2 <= (tmp_757_fu_626_p2 or tmp_756_fu_620_p2);
    p_Result_60_fu_293_p2 <= (tmp_732_fu_287_p2 and tmp_731_fu_281_p2);
    p_Result_s_fu_642_p5 <= (tmp_734_fu_638_p1 & p_Val2_s_reg_147(33 downto 0));
    p_demorgan_fu_608_p2 <= (tmp_754_fu_602_p2 and tmp_753_fu_596_p2);
    p_v_fu_392_p3 <= 
        tmp_642_fu_372_p4 when (cond_fu_366_p2(0) = '1') else 
        tmp_643_fu_382_p4;
    pp_0_V_fu_302_p0 <= pp_0_V_fu_302_p00(46 - 1 downto 0);
    pp_0_V_fu_302_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_60_reg_668),56));
    pp_0_V_fu_302_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pp_0_V_fu_302_p0) * unsigned(ap_const_lv56_5C551D94AE), 56));
    pp_2_V_1_fu_328_p3 <= 
        pp_V_2_s_reg_64 when (sel_tmp2_fu_322_p2(0) = '1') else 
        pp_2_V_fu_314_p3;
    pp_2_V_2_fu_336_p3 <= 
        pp_0_V_fu_302_p2 when (sel_tmp_fu_308_p2(0) = '1') else 
        pp_V_1_s_reg_76;
    pp_2_V_3_fu_344_p3 <= 
        pp_V_1_s_reg_76 when (sel_tmp2_fu_322_p2(0) = '1') else 
        pp_2_V_2_fu_336_p3;
    pp_2_V_5_fu_352_p3 <= 
        pp_0_V_fu_302_p2 when (sel_tmp2_fu_322_p2(0) = '1') else 
        pps_0_V_reg_88;
    pp_2_V_fu_314_p3 <= 
        pp_V_2_s_reg_64 when (sel_tmp_fu_308_p2(0) = '1') else 
        pp_0_V_fu_302_p2;
    pp_V_load_1_phi_fu_404_p3 <= 
        pp_V_1_s_reg_76 when (cond_fu_366_p2(0) = '1') else 
        pp_V_2_s_reg_64;
    pps_1_V_fu_412_p2 <= std_logic_vector(unsigned(r_V_fu_400_p1) + unsigned(pp_V_load_1_phi_fu_404_p3));
    pps_2_V_1_fu_418_p3 <= 
        pps_1_V_fu_412_p2 when (cond_fu_366_p2(0) = '1') else 
        pps_V_1_s_reg_112;
    pps_2_V_2_fu_426_p3 <= 
        pps_V_2_s_reg_124 when (cond_fu_366_p2(0) = '1') else 
        pps_1_V_fu_412_p2;
    r_V_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_v_fu_392_p3),56));
    sel_tmp2_fu_322_p2 <= "1" when (i_reg_100 = ap_const_lv2_0) else "0";
    sel_tmp_fu_308_p2 <= "1" when (i_reg_100 = ap_const_lv2_1) else "0";
    tmp_56_fu_197_p2 <= std_logic_vector(unsigned(Lo_assign_fu_187_p4) + unsigned(ap_const_lv6_10));
    tmp_61_fu_446_p2 <= std_logic_vector(unsigned(i_2_reg_158) + unsigned(ap_const_lv2_1));
    tmp_642_fu_372_p4 <= pps_0_V_reg_88(55 downto 17);
    tmp_643_fu_382_p4 <= pps_V_1_s_reg_112(55 downto 17);
    
    tmp_721_fu_217_p4_proc : process(a_V)
    variable vlo_cpy : STD_LOGIC_VECTOR(46+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(46+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(46 - 1 downto 0);
    variable tmp_721_fu_217_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(46 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(46 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(46 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_2D(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := a_V;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(46-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(46-1-unsigned(ap_const_lv32_2D(6-1 downto 0)));
            for tmp_721_fu_217_p4_i in 0 to 46-1 loop
                v0_cpy(tmp_721_fu_217_p4_i) := a_V(46-1-tmp_721_fu_217_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(46-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_721_fu_217_p4 <= resvalue(46-1 downto 0);
    end process;

    tmp_722_fu_226_p2 <= std_logic_vector(unsigned(Lo_assign_fu_187_p4) - unsigned(Ui_fu_203_p3));
    tmp_723_fu_232_p2 <= std_logic_vector(signed(ap_const_lv6_2D) - signed(Lo_assign_fu_187_p4));
    tmp_724_fu_238_p2 <= std_logic_vector(unsigned(Ui_fu_203_p3) - unsigned(Lo_assign_fu_187_p4));
    tmp_725_fu_244_p3 <= 
        tmp_722_fu_226_p2 when (tmp_fu_211_p2(0) = '1') else 
        tmp_724_fu_238_p2;
    tmp_726_fu_252_p3 <= 
        tmp_721_fu_217_p4 when (tmp_fu_211_p2(0) = '1') else 
        a_V;
    tmp_727_fu_259_p3 <= 
        tmp_723_fu_232_p2 when (tmp_fu_211_p2(0) = '1') else 
        Lo_assign_fu_187_p4;
    tmp_728_fu_267_p2 <= std_logic_vector(signed(ap_const_lv6_2D) - signed(tmp_725_fu_244_p3));
    tmp_729_fu_273_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_727_fu_259_p3),46));
    tmp_730_fu_277_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_728_fu_267_p2),46));
    tmp_731_fu_281_p2 <= std_logic_vector(shift_right(unsigned(tmp_726_fu_252_p3),to_integer(unsigned('0' & tmp_729_fu_273_p1(31-1 downto 0)))));
    tmp_732_fu_287_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv46_3FFFFFFFFFFF),to_integer(unsigned('0' & tmp_730_fu_277_p1(31-1 downto 0)))));
    tmp_734_fu_638_p1 <= pps_V_2_s_reg_124(51 - 1 downto 0);
    tmp_735_fu_452_p1 <= i_2_reg_158(1 - 1 downto 0);
    tmp_736_fu_490_p1 <= pps_0_V_reg_88(17 - 1 downto 0);
    tmp_737_fu_494_p1 <= pps_V_1_s_reg_112(17 - 1 downto 0);
    tmp_738_fu_498_p3 <= 
        tmp_736_fu_490_p1 when (cond1_fu_484_p2(0) = '1') else 
        tmp_737_fu_494_p1;
    tmp_739_fu_510_p2 <= "1" when (unsigned(Li_cast_fu_470_p1) > unsigned(Ui_1_cast_fu_480_p1)) else "0";
    tmp_740_fu_516_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Li_fu_456_p4),7));
    tmp_741_fu_520_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Ui_1_fu_474_p2),7));
    tmp_742_fu_524_p2 <= std_logic_vector(signed(ap_const_lv7_54) - signed(tmp_740_fu_516_p1));
    tmp_743_fu_530_p3 <= 
        tmp_740_fu_516_p1 when (tmp_739_fu_510_p2(0) = '1') else 
        tmp_741_fu_520_p1;
    tmp_744_fu_538_p3 <= 
        tmp_741_fu_520_p1 when (tmp_739_fu_510_p2(0) = '1') else 
        tmp_740_fu_516_p1;
    tmp_745_fu_546_p3 <= 
        tmp_742_fu_524_p2 when (tmp_739_fu_510_p2(0) = '1') else 
        tmp_740_fu_516_p1;
    tmp_746_fu_554_p2 <= std_logic_vector(signed(ap_const_lv7_54) - signed(tmp_743_fu_530_p3));
    tmp_747_fu_560_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_745_fu_546_p3),85));
    tmp_748_fu_564_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_744_fu_538_p3),85));
    tmp_749_fu_568_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_746_fu_554_p2),85));
    tmp_750_fu_572_p2 <= std_logic_vector(shift_left(unsigned(tmp_V_fu_506_p1),to_integer(unsigned('0' & tmp_747_fu_560_p1(31-1 downto 0)))));
    
    tmp_751_fu_578_p4_proc : process(tmp_750_fu_572_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(85+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(85+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(85 - 1 downto 0);
    variable tmp_751_fu_578_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(85 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(85 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(85 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_54(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := tmp_750_fu_572_p2;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(85-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(85-1-unsigned(ap_const_lv32_54(7-1 downto 0)));
            for tmp_751_fu_578_p4_i in 0 to 85-1 loop
                v0_cpy(tmp_751_fu_578_p4_i) := tmp_750_fu_572_p2(85-1-tmp_751_fu_578_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(85-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_751_fu_578_p4 <= resvalue(85-1 downto 0);
    end process;

    tmp_752_fu_588_p3 <= 
        tmp_751_fu_578_p4 when (tmp_739_fu_510_p2(0) = '1') else 
        tmp_750_fu_572_p2;
    tmp_753_fu_596_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv85_1FFFFFFFFFFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_748_fu_564_p1(31-1 downto 0)))));
    tmp_754_fu_602_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv85_1FFFFFFFFFFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_749_fu_568_p1(31-1 downto 0)))));
    tmp_755_fu_614_p2 <= (p_demorgan_fu_608_p2 xor ap_const_lv85_1FFFFFFFFFFFFFFFFFFFFF);
    tmp_756_fu_620_p2 <= (tmp_755_fu_614_p2 and p_Val2_s_reg_147);
    tmp_757_fu_626_p2 <= (tmp_752_fu_588_p3 and p_demorgan_fu_608_p2);
    tmp_V_fu_506_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_738_fu_498_p3),85));
    tmp_fu_211_p2 <= "1" when (unsigned(Lo_assign_fu_187_p4) > unsigned(Ui_fu_203_p3)) else "0";
    tmp_s_fu_181_p2 <= "1" when (i_reg_100 = ap_const_lv2_2) else "0";
end behav;
