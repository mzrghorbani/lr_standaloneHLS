// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module has_key (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        mapHLS_unsigned_int_arrayHLS_Stub_size_read,
        mapHLS_unsigned_int_arrayHLS_Stub_data_first_address0,
        mapHLS_unsigned_int_arrayHLS_Stub_data_first_ce0,
        mapHLS_unsigned_int_arrayHLS_Stub_data_first_q0,
        idx_read,
        ap_return
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] mapHLS_unsigned_int_arrayHLS_Stub_size_read;
output  [4:0] mapHLS_unsigned_int_arrayHLS_Stub_data_first_address0;
output   mapHLS_unsigned_int_arrayHLS_Stub_data_first_ce0;
input  [31:0] mapHLS_unsigned_int_arrayHLS_Stub_data_first_q0;
input  [31:0] idx_read;
output  [0:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg mapHLS_unsigned_int_arrayHLS_Stub_data_first_ce0;
reg[0:0] ap_return;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] tmp_fu_66_p2;
reg   [0:0] tmp_reg_97;
wire    ap_CS_fsm_state2;
wire   [31:0] i_1_fu_71_p2;
reg   [31:0] i_1_reg_101;
reg   [31:0] i_reg_43;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_5_fu_82_p2;
reg   [0:0] ap_phi_mux_p_0_phi_fu_58_p4;
reg   [0:0] p_0_reg_54;
wire   [63:0] tmp_s_fu_77_p1;
reg   [0:0] ap_return_preg;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_return_preg = 1'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 1'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state3) & ((tmp_5_fu_82_p2 == 1'd1) | (tmp_reg_97 == 1'd0)))) begin
            ap_return_preg <= ap_phi_mux_p_0_phi_fu_58_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_5_fu_82_p2 == 1'd0) & (tmp_reg_97 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_reg_43 <= i_1_reg_101;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_43 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_5_fu_82_p2 == 1'd1) & (tmp_reg_97 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        p_0_reg_54 <= 1'd1;
    end else if (((tmp_fu_66_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        p_0_reg_54 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_1_reg_101 <= i_1_fu_71_p2;
        tmp_reg_97 <= tmp_fu_66_p2;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & ((tmp_5_fu_82_p2 == 1'd1) | (tmp_reg_97 == 1'd0))) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_5_fu_82_p2 == 1'd1) & (tmp_reg_97 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_phi_mux_p_0_phi_fu_58_p4 = 1'd1;
    end else begin
        ap_phi_mux_p_0_phi_fu_58_p4 = p_0_reg_54;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & ((tmp_5_fu_82_p2 == 1'd1) | (tmp_reg_97 == 1'd0)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & ((tmp_5_fu_82_p2 == 1'd1) | (tmp_reg_97 == 1'd0)))) begin
        ap_return = ap_phi_mux_p_0_phi_fu_58_p4;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        mapHLS_unsigned_int_arrayHLS_Stub_data_first_ce0 = 1'b1;
    end else begin
        mapHLS_unsigned_int_arrayHLS_Stub_data_first_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & ((tmp_5_fu_82_p2 == 1'd1) | (tmp_reg_97 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign i_1_fu_71_p2 = (i_reg_43 + 32'd1);

assign mapHLS_unsigned_int_arrayHLS_Stub_data_first_address0 = tmp_s_fu_77_p1;

assign tmp_5_fu_82_p2 = ((mapHLS_unsigned_int_arrayHLS_Stub_data_first_q0 == idx_read) ? 1'b1 : 1'b0);

assign tmp_fu_66_p2 = ((i_reg_43 < mapHLS_unsigned_int_arrayHLS_Stub_size_read) ? 1'b1 : 1'b0);

assign tmp_s_fu_77_p1 = i_reg_43;

endmodule //has_key
