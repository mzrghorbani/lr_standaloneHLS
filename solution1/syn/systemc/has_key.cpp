// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "has_key.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic has_key::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic has_key::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> has_key::ap_ST_fsm_state1 = "1";
const sc_lv<3> has_key::ap_ST_fsm_state2 = "10";
const sc_lv<3> has_key::ap_ST_fsm_state3 = "100";
const sc_lv<32> has_key::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> has_key::ap_const_lv32_1 = "1";
const sc_lv<1> has_key::ap_const_lv1_1 = "1";
const sc_lv<32> has_key::ap_const_lv32_2 = "10";
const sc_lv<1> has_key::ap_const_lv1_0 = "0";
const bool has_key::ap_const_boolean_1 = true;

has_key::has_key(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_reg_97 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_5_fu_82_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_phi_mux_p_0_phi_fu_58_p4);
    sensitive << ( tmp_reg_97 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_5_fu_82_p2 );
    sensitive << ( p_0_reg_54 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( tmp_reg_97 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_5_fu_82_p2 );

    SC_METHOD(thread_ap_return);
    sensitive << ( tmp_reg_97 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_5_fu_82_p2 );
    sensitive << ( ap_phi_mux_p_0_phi_fu_58_p4 );
    sensitive << ( ap_return_preg );

    SC_METHOD(thread_i_1_fu_71_p2);
    sensitive << ( i_reg_43 );

    SC_METHOD(thread_mapHLS_unsigned_int_arrayHLS_Stub_data_first_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_s_fu_77_p1 );

    SC_METHOD(thread_mapHLS_unsigned_int_arrayHLS_Stub_data_first_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_tmp_5_fu_82_p2);
    sensitive << ( mapHLS_unsigned_int_arrayHLS_Stub_data_first_q0 );
    sensitive << ( idx_read );
    sensitive << ( tmp_reg_97 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_tmp_fu_66_p2);
    sensitive << ( mapHLS_unsigned_int_arrayHLS_Stub_size_read );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_reg_43 );

    SC_METHOD(thread_tmp_s_fu_77_p1);
    sensitive << ( i_reg_43 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_reg_97 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_5_fu_82_p2 );

    ap_CS_fsm = "001";
    ap_return_preg = "0";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "has_key_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, mapHLS_unsigned_int_arrayHLS_Stub_size_read, "(port)mapHLS_unsigned_int_arrayHLS_Stub_size_read");
    sc_trace(mVcdFile, mapHLS_unsigned_int_arrayHLS_Stub_data_first_address0, "(port)mapHLS_unsigned_int_arrayHLS_Stub_data_first_address0");
    sc_trace(mVcdFile, mapHLS_unsigned_int_arrayHLS_Stub_data_first_ce0, "(port)mapHLS_unsigned_int_arrayHLS_Stub_data_first_ce0");
    sc_trace(mVcdFile, mapHLS_unsigned_int_arrayHLS_Stub_data_first_q0, "(port)mapHLS_unsigned_int_arrayHLS_Stub_data_first_q0");
    sc_trace(mVcdFile, idx_read, "(port)idx_read");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, tmp_fu_66_p2, "tmp_fu_66_p2");
    sc_trace(mVcdFile, tmp_reg_97, "tmp_reg_97");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, i_1_fu_71_p2, "i_1_fu_71_p2");
    sc_trace(mVcdFile, i_1_reg_101, "i_1_reg_101");
    sc_trace(mVcdFile, i_reg_43, "i_reg_43");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_5_fu_82_p2, "tmp_5_fu_82_p2");
    sc_trace(mVcdFile, ap_phi_mux_p_0_phi_fu_58_p4, "ap_phi_mux_p_0_phi_fu_58_p4");
    sc_trace(mVcdFile, p_0_reg_54, "p_0_reg_54");
    sc_trace(mVcdFile, tmp_s_fu_77_p1, "tmp_s_fu_77_p1");
    sc_trace(mVcdFile, ap_return_preg, "ap_return_preg");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

has_key::~has_key() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void has_key::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_preg = ap_const_lv1_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
             (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_5_fu_82_p2.read()) || 
              esl_seteq<1,1,1>(tmp_reg_97.read(), ap_const_lv1_0)))) {
            ap_return_preg = ap_phi_mux_p_0_phi_fu_58_p4.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(tmp_reg_97.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(tmp_5_fu_82_p2.read(), ap_const_lv1_0))) {
        i_reg_43 = i_1_reg_101.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_reg_43 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(tmp_reg_97.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_5_fu_82_p2.read()))) {
        p_0_reg_54 = ap_const_lv1_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(tmp_fu_66_p2.read(), ap_const_lv1_0))) {
        p_0_reg_54 = ap_const_lv1_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_1_reg_101 = i_1_fu_71_p2.read();
        tmp_reg_97 = tmp_fu_66_p2.read();
    }
}

void has_key::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void has_key::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void has_key::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void has_key::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_5_fu_82_p2.read()) || 
           esl_seteq<1,1,1>(tmp_reg_97.read(), ap_const_lv1_0))))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void has_key::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void has_key::thread_ap_phi_mux_p_0_phi_fu_58_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(tmp_reg_97.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_5_fu_82_p2.read()))) {
        ap_phi_mux_p_0_phi_fu_58_p4 = ap_const_lv1_1;
    } else {
        ap_phi_mux_p_0_phi_fu_58_p4 = p_0_reg_54.read();
    }
}

void has_key::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_5_fu_82_p2.read()) || 
          esl_seteq<1,1,1>(tmp_reg_97.read(), ap_const_lv1_0)))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void has_key::thread_ap_return() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_5_fu_82_p2.read()) || 
          esl_seteq<1,1,1>(tmp_reg_97.read(), ap_const_lv1_0)))) {
        ap_return = ap_phi_mux_p_0_phi_fu_58_p4.read();
    } else {
        ap_return = ap_return_preg.read();
    }
}

void has_key::thread_i_1_fu_71_p2() {
    i_1_fu_71_p2 = (!i_reg_43.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(i_reg_43.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void has_key::thread_mapHLS_unsigned_int_arrayHLS_Stub_data_first_address0() {
    mapHLS_unsigned_int_arrayHLS_Stub_data_first_address0 =  (sc_lv<5>) (tmp_s_fu_77_p1.read());
}

void has_key::thread_mapHLS_unsigned_int_arrayHLS_Stub_data_first_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        mapHLS_unsigned_int_arrayHLS_Stub_data_first_ce0 = ap_const_logic_1;
    } else {
        mapHLS_unsigned_int_arrayHLS_Stub_data_first_ce0 = ap_const_logic_0;
    }
}

void has_key::thread_tmp_5_fu_82_p2() {
    tmp_5_fu_82_p2 = (!mapHLS_unsigned_int_arrayHLS_Stub_data_first_q0.read().is_01() || !idx_read.read().is_01())? sc_lv<1>(): sc_lv<1>(mapHLS_unsigned_int_arrayHLS_Stub_data_first_q0.read() == idx_read.read());
}

void has_key::thread_tmp_fu_66_p2() {
    tmp_fu_66_p2 = (!i_reg_43.read().is_01() || !mapHLS_unsigned_int_arrayHLS_Stub_size_read.read().is_01())? sc_lv<1>(): (sc_biguint<32>(i_reg_43.read()) < sc_biguint<32>(mapHLS_unsigned_int_arrayHLS_Stub_size_read.read()));
}

void has_key::thread_tmp_s_fu_77_p1() {
    tmp_s_fu_77_p1 = esl_zext<64,32>(i_reg_43.read());
}

void has_key::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_5_fu_82_p2.read()) || 
  esl_seteq<1,1,1>(tmp_reg_97.read(), ap_const_lv1_0)))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

}

