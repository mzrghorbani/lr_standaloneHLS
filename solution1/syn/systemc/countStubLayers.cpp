// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "countStubLayers.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic countStubLayers::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic countStubLayers::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<5> countStubLayers::ap_ST_fsm_state1 = "1";
const sc_lv<5> countStubLayers::ap_ST_fsm_state2 = "10";
const sc_lv<5> countStubLayers::ap_ST_fsm_state3 = "100";
const sc_lv<5> countStubLayers::ap_ST_fsm_state4 = "1000";
const sc_lv<5> countStubLayers::ap_ST_fsm_state5 = "10000";
const sc_lv<32> countStubLayers::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> countStubLayers::ap_const_lv32_1 = "1";
const sc_lv<1> countStubLayers::ap_const_lv1_1 = "1";
const sc_lv<32> countStubLayers::ap_const_lv32_2 = "10";
const sc_lv<32> countStubLayers::ap_const_lv32_3 = "11";
const sc_lv<5> countStubLayers::ap_const_lv5_0 = "00000";
const sc_lv<1> countStubLayers::ap_const_lv1_0 = "0";
const sc_lv<32> countStubLayers::ap_const_lv32_4 = "100";
const sc_lv<5> countStubLayers::ap_const_lv5_1 = "1";
const sc_lv<5> countStubLayers::ap_const_lv5_1D = "11101";
const sc_lv<32> countStubLayers::ap_const_lv32_13 = "10011";
const sc_lv<32> countStubLayers::ap_const_lv32_15 = "10101";
const sc_lv<32> countStubLayers::ap_const_lv32_A = "1010";
const sc_lv<32> countStubLayers::ap_const_lv32_FFFFFFF6 = "11111111111111111111111111110110";
const bool countStubLayers::ap_const_boolean_1 = true;

countStubLayers::countStubLayers(sc_module_name name) : sc_module(name), mVcdFile(0) {
    foundLayers_U = new countStubLayers_foundLayers("foundLayers_U");
    foundLayers_U->clk(ap_clk);
    foundLayers_U->reset(ap_rst);
    foundLayers_U->address0(foundLayers_address0);
    foundLayers_U->ce0(foundLayers_ce0);
    foundLayers_U->we0(foundLayers_we0);
    foundLayers_U->d0(foundLayers_d0);
    foundLayers_U->q0(foundLayers_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_51_fu_187_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_51_fu_187_p2 );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( nLayers_fu_52 );
    sensitive << ( tmp_51_fu_187_p2 );

    SC_METHOD(thread_brmerge3_i_fu_222_p2);
    sensitive << ( tmp_36_not_i_fu_210_p2 );
    sensitive << ( stub_psModule_read_s_fu_216_p2 );

    SC_METHOD(thread_brmerge_fu_274_p2);
    sensitive << ( stubs_data_psModule_s_q0 );
    sensitive << ( onlySeed_not_reg_320 );

    SC_METHOD(thread_brmerge_i_fu_204_p2);
    sensitive << ( stubs_data_psModule_s_q0 );
    sensitive << ( tmp_not_i_fu_198_p2 );

    SC_METHOD(thread_foundLayers_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( foundLayers_addr_1_reg_352 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_fu_159_p1 );
    sensitive << ( tmp_52_fu_279_p1 );

    SC_METHOD(thread_foundLayers_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_foundLayers_d0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_foundLayers_we0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( brmerge_reg_348 );
    sensitive << ( foundLayers_q0 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_indvarinc_fu_153_p2);
    sensitive << ( invdar_reg_128 );

    SC_METHOD(thread_nLayers_1_fu_284_p2);
    sensitive << ( nLayers_fu_52 );

    SC_METHOD(thread_onlySeed_not_fu_170_p0);
    sensitive << ( onlySeed );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_onlySeed_not_fu_170_p2);
    sensitive << ( onlySeed_not_fu_170_p0 );

    SC_METHOD(thread_p_0_i_fu_266_p3);
    sensitive << ( sel_tmp5_demorgan_i_fu_260_p2 );
    sensitive << ( sel_tmp2_i_fu_252_p3 );
    sensitive << ( tmp_i_fu_228_p2 );

    SC_METHOD(thread_p_begin_0_rec_cast_fu_180_p1);
    sensitive << ( p_begin_0_rec_reg_139 );

    SC_METHOD(thread_p_rec_fu_192_p2);
    sensitive << ( p_begin_0_rec_reg_139 );

    SC_METHOD(thread_sel_tmp1_i_fu_246_p2);
    sensitive << ( stubs_data_barrel_s_q0 );
    sensitive << ( sel_tmp_i_fu_240_p2 );

    SC_METHOD(thread_sel_tmp2_i_fu_252_p3);
    sensitive << ( stubs_data_layerId_s_q0 );
    sensitive << ( sel_tmp1_i_fu_246_p2 );
    sensitive << ( tmp_17_i_fu_234_p2 );

    SC_METHOD(thread_sel_tmp5_demorgan_i_fu_260_p2);
    sensitive << ( stubs_data_barrel_s_q0 );
    sensitive << ( brmerge_i_fu_204_p2 );

    SC_METHOD(thread_sel_tmp_i_fu_240_p2);
    sensitive << ( brmerge_i_fu_204_p2 );
    sensitive << ( brmerge3_i_fu_222_p2 );

    SC_METHOD(thread_stub_psModule_read_s_fu_216_p2);
    sensitive << ( stubs_data_psModule_s_q0 );

    SC_METHOD(thread_stubs_data_barrel_s_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( p_begin_0_rec_cast_fu_180_p1 );

    SC_METHOD(thread_stubs_data_barrel_s_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_stubs_data_layerId_s_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( p_begin_0_rec_cast_fu_180_p1 );

    SC_METHOD(thread_stubs_data_layerId_s_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_stubs_data_psModule_s_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( p_begin_0_rec_cast_fu_180_p1 );

    SC_METHOD(thread_stubs_data_psModule_s_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_tmp_17_i_fu_234_p2);
    sensitive << ( stubs_data_layerId_s_q0 );

    SC_METHOD(thread_tmp_36_not_i_fu_210_p2);
    sensitive << ( stubs_data_layerId_s_q0 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_tmp_51_fu_187_p2);
    sensitive << ( stubs_size_read );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( p_begin_0_rec_reg_139 );

    SC_METHOD(thread_tmp_52_fu_279_p1);
    sensitive << ( p_0_i_fu_266_p3 );

    SC_METHOD(thread_tmp_fu_159_p1);
    sensitive << ( invdar_reg_128 );

    SC_METHOD(thread_tmp_i_fu_228_p2);
    sensitive << ( stubs_data_layerId_s_q0 );

    SC_METHOD(thread_tmp_not_i_fu_198_p2);
    sensitive << ( stubs_data_layerId_s_q0 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_tmp_s_fu_164_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( invdar_reg_128 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_s_fu_164_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_51_fu_187_p2 );

    ap_CS_fsm = "00001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "countStubLayers_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, stubs_size_read, "(port)stubs_size_read");
    sc_trace(mVcdFile, stubs_data_layerId_s_address0, "(port)stubs_data_layerId_s_address0");
    sc_trace(mVcdFile, stubs_data_layerId_s_ce0, "(port)stubs_data_layerId_s_ce0");
    sc_trace(mVcdFile, stubs_data_layerId_s_q0, "(port)stubs_data_layerId_s_q0");
    sc_trace(mVcdFile, stubs_data_psModule_s_address0, "(port)stubs_data_psModule_s_address0");
    sc_trace(mVcdFile, stubs_data_psModule_s_ce0, "(port)stubs_data_psModule_s_ce0");
    sc_trace(mVcdFile, stubs_data_psModule_s_q0, "(port)stubs_data_psModule_s_q0");
    sc_trace(mVcdFile, stubs_data_barrel_s_address0, "(port)stubs_data_barrel_s_address0");
    sc_trace(mVcdFile, stubs_data_barrel_s_ce0, "(port)stubs_data_barrel_s_ce0");
    sc_trace(mVcdFile, stubs_data_barrel_s_q0, "(port)stubs_data_barrel_s_q0");
    sc_trace(mVcdFile, onlySeed, "(port)onlySeed");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, indvarinc_fu_153_p2, "indvarinc_fu_153_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, onlySeed_not_fu_170_p2, "onlySeed_not_fu_170_p2");
    sc_trace(mVcdFile, onlySeed_not_reg_320, "onlySeed_not_reg_320");
    sc_trace(mVcdFile, tmp_s_fu_164_p2, "tmp_s_fu_164_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, p_rec_fu_192_p2, "p_rec_fu_192_p2");
    sc_trace(mVcdFile, p_rec_reg_343, "p_rec_reg_343");
    sc_trace(mVcdFile, brmerge_fu_274_p2, "brmerge_fu_274_p2");
    sc_trace(mVcdFile, brmerge_reg_348, "brmerge_reg_348");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, foundLayers_addr_1_reg_352, "foundLayers_addr_1_reg_352");
    sc_trace(mVcdFile, foundLayers_address0, "foundLayers_address0");
    sc_trace(mVcdFile, foundLayers_ce0, "foundLayers_ce0");
    sc_trace(mVcdFile, foundLayers_we0, "foundLayers_we0");
    sc_trace(mVcdFile, foundLayers_d0, "foundLayers_d0");
    sc_trace(mVcdFile, foundLayers_q0, "foundLayers_q0");
    sc_trace(mVcdFile, invdar_reg_128, "invdar_reg_128");
    sc_trace(mVcdFile, p_begin_0_rec_reg_139, "p_begin_0_rec_reg_139");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, tmp_fu_159_p1, "tmp_fu_159_p1");
    sc_trace(mVcdFile, p_begin_0_rec_cast_fu_180_p1, "p_begin_0_rec_cast_fu_180_p1");
    sc_trace(mVcdFile, tmp_52_fu_279_p1, "tmp_52_fu_279_p1");
    sc_trace(mVcdFile, nLayers_fu_52, "nLayers_fu_52");
    sc_trace(mVcdFile, nLayers_1_fu_284_p2, "nLayers_1_fu_284_p2");
    sc_trace(mVcdFile, tmp_51_fu_187_p2, "tmp_51_fu_187_p2");
    sc_trace(mVcdFile, onlySeed_not_fu_170_p0, "onlySeed_not_fu_170_p0");
    sc_trace(mVcdFile, tmp_not_i_fu_198_p2, "tmp_not_i_fu_198_p2");
    sc_trace(mVcdFile, tmp_36_not_i_fu_210_p2, "tmp_36_not_i_fu_210_p2");
    sc_trace(mVcdFile, stub_psModule_read_s_fu_216_p2, "stub_psModule_read_s_fu_216_p2");
    sc_trace(mVcdFile, brmerge_i_fu_204_p2, "brmerge_i_fu_204_p2");
    sc_trace(mVcdFile, brmerge3_i_fu_222_p2, "brmerge3_i_fu_222_p2");
    sc_trace(mVcdFile, sel_tmp_i_fu_240_p2, "sel_tmp_i_fu_240_p2");
    sc_trace(mVcdFile, sel_tmp1_i_fu_246_p2, "sel_tmp1_i_fu_246_p2");
    sc_trace(mVcdFile, tmp_17_i_fu_234_p2, "tmp_17_i_fu_234_p2");
    sc_trace(mVcdFile, sel_tmp5_demorgan_i_fu_260_p2, "sel_tmp5_demorgan_i_fu_260_p2");
    sc_trace(mVcdFile, sel_tmp2_i_fu_252_p3, "sel_tmp2_i_fu_252_p3");
    sc_trace(mVcdFile, tmp_i_fu_228_p2, "tmp_i_fu_228_p2");
    sc_trace(mVcdFile, p_0_i_fu_266_p3, "p_0_i_fu_266_p3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

countStubLayers::~countStubLayers() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete foundLayers_U;
}

void countStubLayers::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(tmp_s_fu_164_p2.read(), ap_const_lv1_0))) {
        invdar_reg_128 = indvarinc_fu_153_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        invdar_reg_128 = ap_const_lv5_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, brmerge_reg_348.read()) && 
         esl_seteq<1,1,1>(foundLayers_q0.read(), ap_const_lv1_0))) {
        nLayers_fu_52 = nLayers_1_fu_284_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(tmp_s_fu_164_p2.read(), ap_const_lv1_1))) {
        nLayers_fu_52 = ap_const_lv32_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        p_begin_0_rec_reg_139 = p_rec_reg_343.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(tmp_s_fu_164_p2.read(), ap_const_lv1_1))) {
        p_begin_0_rec_reg_139 = ap_const_lv32_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        brmerge_reg_348 = brmerge_fu_274_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, brmerge_fu_274_p2.read()))) {
        foundLayers_addr_1_reg_352 =  (sc_lv<5>) (tmp_52_fu_279_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(tmp_s_fu_164_p2.read(), ap_const_lv1_1))) {
        onlySeed_not_reg_320 = onlySeed_not_fu_170_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        p_rec_reg_343 = p_rec_fu_192_p2.read();
    }
}

void countStubLayers::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void countStubLayers::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void countStubLayers::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void countStubLayers::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void countStubLayers::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void countStubLayers::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_51_fu_187_p2.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void countStubLayers::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void countStubLayers::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_51_fu_187_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void countStubLayers::thread_ap_return() {
    ap_return = nLayers_fu_52.read();
}

void countStubLayers::thread_brmerge3_i_fu_222_p2() {
    brmerge3_i_fu_222_p2 = (tmp_36_not_i_fu_210_p2.read() | stub_psModule_read_s_fu_216_p2.read());
}

void countStubLayers::thread_brmerge_fu_274_p2() {
    brmerge_fu_274_p2 = (stubs_data_psModule_s_q0.read() | onlySeed_not_reg_320.read());
}

void countStubLayers::thread_brmerge_i_fu_204_p2() {
    brmerge_i_fu_204_p2 = (stubs_data_psModule_s_q0.read() | tmp_not_i_fu_198_p2.read());
}

void countStubLayers::thread_foundLayers_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        foundLayers_address0 = foundLayers_addr_1_reg_352.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        foundLayers_address0 =  (sc_lv<5>) (tmp_52_fu_279_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        foundLayers_address0 =  (sc_lv<5>) (tmp_fu_159_p1.read());
    } else {
        foundLayers_address0 = "XXXXX";
    }
}

void countStubLayers::thread_foundLayers_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        foundLayers_ce0 = ap_const_logic_1;
    } else {
        foundLayers_ce0 = ap_const_logic_0;
    }
}

void countStubLayers::thread_foundLayers_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        foundLayers_d0 = ap_const_lv1_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        foundLayers_d0 = ap_const_lv1_0;
    } else {
        foundLayers_d0 =  (sc_lv<1>) ("X");
    }
}

void countStubLayers::thread_foundLayers_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, brmerge_reg_348.read()) && 
          esl_seteq<1,1,1>(foundLayers_q0.read(), ap_const_lv1_0)))) {
        foundLayers_we0 = ap_const_logic_1;
    } else {
        foundLayers_we0 = ap_const_logic_0;
    }
}

void countStubLayers::thread_indvarinc_fu_153_p2() {
    indvarinc_fu_153_p2 = (!invdar_reg_128.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(invdar_reg_128.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void countStubLayers::thread_nLayers_1_fu_284_p2() {
    nLayers_1_fu_284_p2 = (!nLayers_fu_52.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(nLayers_fu_52.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void countStubLayers::thread_onlySeed_not_fu_170_p0() {
    onlySeed_not_fu_170_p0 =  (sc_lv<1>) (onlySeed.read());
}

void countStubLayers::thread_onlySeed_not_fu_170_p2() {
    onlySeed_not_fu_170_p2 = (onlySeed_not_fu_170_p0.read() ^ ap_const_lv1_1);
}

void countStubLayers::thread_p_0_i_fu_266_p3() {
    p_0_i_fu_266_p3 = (!sel_tmp5_demorgan_i_fu_260_p2.read()[0].is_01())? sc_lv<32>(): ((sel_tmp5_demorgan_i_fu_260_p2.read()[0].to_bool())? sel_tmp2_i_fu_252_p3.read(): tmp_i_fu_228_p2.read());
}

void countStubLayers::thread_p_begin_0_rec_cast_fu_180_p1() {
    p_begin_0_rec_cast_fu_180_p1 = esl_zext<64,32>(p_begin_0_rec_reg_139.read());
}

void countStubLayers::thread_p_rec_fu_192_p2() {
    p_rec_fu_192_p2 = (!p_begin_0_rec_reg_139.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(p_begin_0_rec_reg_139.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void countStubLayers::thread_sel_tmp1_i_fu_246_p2() {
    sel_tmp1_i_fu_246_p2 = (stubs_data_barrel_s_q0.read() | sel_tmp_i_fu_240_p2.read());
}

void countStubLayers::thread_sel_tmp2_i_fu_252_p3() {
    sel_tmp2_i_fu_252_p3 = (!sel_tmp1_i_fu_246_p2.read()[0].is_01())? sc_lv<32>(): ((sel_tmp1_i_fu_246_p2.read()[0].to_bool())? stubs_data_layerId_s_q0.read(): tmp_17_i_fu_234_p2.read());
}

void countStubLayers::thread_sel_tmp5_demorgan_i_fu_260_p2() {
    sel_tmp5_demorgan_i_fu_260_p2 = (stubs_data_barrel_s_q0.read() | brmerge_i_fu_204_p2.read());
}

void countStubLayers::thread_sel_tmp_i_fu_240_p2() {
    sel_tmp_i_fu_240_p2 = (brmerge_i_fu_204_p2.read() & brmerge3_i_fu_222_p2.read());
}

void countStubLayers::thread_stub_psModule_read_s_fu_216_p2() {
    stub_psModule_read_s_fu_216_p2 = (stubs_data_psModule_s_q0.read() ^ ap_const_lv1_1);
}

void countStubLayers::thread_stubs_data_barrel_s_address0() {
    stubs_data_barrel_s_address0 =  (sc_lv<4>) (p_begin_0_rec_cast_fu_180_p1.read());
}

void countStubLayers::thread_stubs_data_barrel_s_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        stubs_data_barrel_s_ce0 = ap_const_logic_1;
    } else {
        stubs_data_barrel_s_ce0 = ap_const_logic_0;
    }
}

void countStubLayers::thread_stubs_data_layerId_s_address0() {
    stubs_data_layerId_s_address0 =  (sc_lv<4>) (p_begin_0_rec_cast_fu_180_p1.read());
}

void countStubLayers::thread_stubs_data_layerId_s_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        stubs_data_layerId_s_ce0 = ap_const_logic_1;
    } else {
        stubs_data_layerId_s_ce0 = ap_const_logic_0;
    }
}

void countStubLayers::thread_stubs_data_psModule_s_address0() {
    stubs_data_psModule_s_address0 =  (sc_lv<4>) (p_begin_0_rec_cast_fu_180_p1.read());
}

void countStubLayers::thread_stubs_data_psModule_s_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        stubs_data_psModule_s_ce0 = ap_const_logic_1;
    } else {
        stubs_data_psModule_s_ce0 = ap_const_logic_0;
    }
}

void countStubLayers::thread_tmp_17_i_fu_234_p2() {
    tmp_17_i_fu_234_p2 = (!stubs_data_layerId_s_q0.read().is_01() || !ap_const_lv32_FFFFFFF6.is_01())? sc_lv<32>(): (sc_biguint<32>(stubs_data_layerId_s_q0.read()) + sc_bigint<32>(ap_const_lv32_FFFFFFF6));
}

void countStubLayers::thread_tmp_36_not_i_fu_210_p2() {
    tmp_36_not_i_fu_210_p2 = (!stubs_data_layerId_s_q0.read().is_01() || !ap_const_lv32_15.is_01())? sc_lv<1>(): (sc_biguint<32>(stubs_data_layerId_s_q0.read()) < sc_biguint<32>(ap_const_lv32_15));
}

void countStubLayers::thread_tmp_51_fu_187_p2() {
    tmp_51_fu_187_p2 = (!p_begin_0_rec_reg_139.read().is_01() || !stubs_size_read.read().is_01())? sc_lv<1>(): sc_lv<1>(p_begin_0_rec_reg_139.read() == stubs_size_read.read());
}

void countStubLayers::thread_tmp_52_fu_279_p1() {
    tmp_52_fu_279_p1 = esl_zext<64,32>(p_0_i_fu_266_p3.read());
}

void countStubLayers::thread_tmp_fu_159_p1() {
    tmp_fu_159_p1 = esl_zext<64,5>(invdar_reg_128.read());
}

void countStubLayers::thread_tmp_i_fu_228_p2() {
    tmp_i_fu_228_p2 = (!stubs_data_layerId_s_q0.read().is_01() || !ap_const_lv32_A.is_01())? sc_lv<32>(): (sc_biguint<32>(stubs_data_layerId_s_q0.read()) + sc_biguint<32>(ap_const_lv32_A));
}

void countStubLayers::thread_tmp_not_i_fu_198_p2() {
    tmp_not_i_fu_198_p2 = (!stubs_data_layerId_s_q0.read().is_01() || !ap_const_lv32_13.is_01())? sc_lv<1>(): (sc_biguint<32>(stubs_data_layerId_s_q0.read()) > sc_biguint<32>(ap_const_lv32_13));
}

void countStubLayers::thread_tmp_s_fu_164_p2() {
    tmp_s_fu_164_p2 = (!invdar_reg_128.read().is_01() || !ap_const_lv5_1D.is_01())? sc_lv<1>(): sc_lv<1>(invdar_reg_128.read() == ap_const_lv5_1D);
}

void countStubLayers::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(tmp_s_fu_164_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_51_fu_187_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        default : 
            ap_NS_fsm = "XXXXX";
            break;
    }
}

}

