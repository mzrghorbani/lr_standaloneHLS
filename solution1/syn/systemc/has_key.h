// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _has_key_HH_
#define _has_key_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct has_key : public sc_module {
    // Port declarations 12
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > mapHLS_unsigned_int_arrayHLS_Stub_size_read;
    sc_out< sc_lv<5> > mapHLS_unsigned_int_arrayHLS_Stub_data_first_address0;
    sc_out< sc_logic > mapHLS_unsigned_int_arrayHLS_Stub_data_first_ce0;
    sc_in< sc_lv<32> > mapHLS_unsigned_int_arrayHLS_Stub_data_first_q0;
    sc_in< sc_lv<32> > idx_read;
    sc_out< sc_lv<1> > ap_return;


    // Module declarations
    has_key(sc_module_name name);
    SC_HAS_PROCESS(has_key);

    ~has_key();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<1> > tmp_fu_66_p2;
    sc_signal< sc_lv<1> > tmp_reg_97;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<32> > i_1_fu_71_p2;
    sc_signal< sc_lv<32> > i_1_reg_101;
    sc_signal< sc_lv<32> > i_reg_43;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > tmp_5_fu_82_p2;
    sc_signal< sc_lv<1> > ap_phi_mux_p_0_phi_fu_58_p4;
    sc_signal< sc_lv<1> > p_0_reg_54;
    sc_signal< sc_lv<64> > tmp_s_fu_77_p1;
    sc_signal< sc_lv<1> > ap_return_preg;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_state2;
    static const sc_lv<3> ap_ST_fsm_state3;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_phi_mux_p_0_phi_fu_58_p4();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_i_1_fu_71_p2();
    void thread_mapHLS_unsigned_int_arrayHLS_Stub_data_first_address0();
    void thread_mapHLS_unsigned_int_arrayHLS_Stub_data_first_ce0();
    void thread_tmp_5_fu_82_p2();
    void thread_tmp_fu_66_p2();
    void thread_tmp_s_fu_77_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
