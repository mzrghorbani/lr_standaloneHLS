// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module countStubLayers (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        stubs_size_read,
        stubs_data_layerId_s_address0,
        stubs_data_layerId_s_ce0,
        stubs_data_layerId_s_q0,
        stubs_data_psModule_s_address0,
        stubs_data_psModule_s_ce0,
        stubs_data_psModule_s_q0,
        stubs_data_barrel_s_address0,
        stubs_data_barrel_s_ce0,
        stubs_data_barrel_s_q0,
        onlySeed,
        ap_return
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] stubs_size_read;
output  [3:0] stubs_data_layerId_s_address0;
output   stubs_data_layerId_s_ce0;
input  [31:0] stubs_data_layerId_s_q0;
output  [3:0] stubs_data_psModule_s_address0;
output   stubs_data_psModule_s_ce0;
input  [0:0] stubs_data_psModule_s_q0;
output  [3:0] stubs_data_barrel_s_address0;
output   stubs_data_barrel_s_ce0;
input  [0:0] stubs_data_barrel_s_q0;
input   onlySeed;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg stubs_data_layerId_s_ce0;
reg stubs_data_psModule_s_ce0;
reg stubs_data_barrel_s_ce0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] indvarinc_fu_153_p2;
wire    ap_CS_fsm_state2;
wire   [0:0] onlySeed_not_fu_170_p2;
reg   [0:0] onlySeed_not_reg_320;
wire   [0:0] tmp_s_fu_164_p2;
wire    ap_CS_fsm_state3;
wire   [31:0] p_rec_fu_192_p2;
reg   [31:0] p_rec_reg_343;
wire   [0:0] brmerge_fu_274_p2;
reg   [0:0] brmerge_reg_348;
wire    ap_CS_fsm_state4;
reg   [4:0] foundLayers_addr_1_reg_352;
reg   [4:0] foundLayers_address0;
reg    foundLayers_ce0;
reg    foundLayers_we0;
reg   [0:0] foundLayers_d0;
wire   [0:0] foundLayers_q0;
reg   [4:0] invdar_reg_128;
reg   [31:0] p_begin_0_rec_reg_139;
wire    ap_CS_fsm_state5;
wire   [63:0] tmp_fu_159_p1;
wire   [63:0] p_begin_0_rec_cast_fu_180_p1;
wire   [63:0] tmp_52_fu_279_p1;
reg   [31:0] nLayers_fu_52;
wire   [31:0] nLayers_1_fu_284_p2;
wire   [0:0] tmp_51_fu_187_p2;
wire   [0:0] onlySeed_not_fu_170_p0;
wire   [0:0] tmp_not_i_fu_198_p2;
wire   [0:0] tmp_36_not_i_fu_210_p2;
wire   [0:0] stub_psModule_read_s_fu_216_p2;
wire   [0:0] brmerge_i_fu_204_p2;
wire   [0:0] brmerge3_i_fu_222_p2;
wire   [0:0] sel_tmp_i_fu_240_p2;
wire   [0:0] sel_tmp1_i_fu_246_p2;
wire   [31:0] tmp_17_i_fu_234_p2;
wire   [0:0] sel_tmp5_demorgan_i_fu_260_p2;
wire   [31:0] sel_tmp2_i_fu_252_p3;
wire   [31:0] tmp_i_fu_228_p2;
wire   [31:0] p_0_i_fu_266_p3;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

countStubLayers_foundLayers #(
    .DataWidth( 1 ),
    .AddressRange( 30 ),
    .AddressWidth( 5 ))
foundLayers_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(foundLayers_address0),
    .ce0(foundLayers_ce0),
    .we0(foundLayers_we0),
    .d0(foundLayers_d0),
    .q0(foundLayers_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_s_fu_164_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        invdar_reg_128 <= indvarinc_fu_153_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        invdar_reg_128 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((foundLayers_q0 == 1'd0) & (brmerge_reg_348 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        nLayers_fu_52 <= nLayers_1_fu_284_p2;
    end else if (((tmp_s_fu_164_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        nLayers_fu_52 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        p_begin_0_rec_reg_139 <= p_rec_reg_343;
    end else if (((tmp_s_fu_164_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        p_begin_0_rec_reg_139 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        brmerge_reg_348 <= brmerge_fu_274_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((brmerge_fu_274_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        foundLayers_addr_1_reg_352 <= tmp_52_fu_279_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_s_fu_164_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        onlySeed_not_reg_320 <= onlySeed_not_fu_170_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        p_rec_reg_343 <= p_rec_fu_192_p2;
    end
end

always @ (*) begin
    if ((((tmp_51_fu_187_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_51_fu_187_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        foundLayers_address0 = foundLayers_addr_1_reg_352;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        foundLayers_address0 = tmp_52_fu_279_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        foundLayers_address0 = tmp_fu_159_p1;
    end else begin
        foundLayers_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state5))) begin
        foundLayers_ce0 = 1'b1;
    end else begin
        foundLayers_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        foundLayers_d0 = 1'd1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        foundLayers_d0 = 1'd0;
    end else begin
        foundLayers_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((foundLayers_q0 == 1'd0) & (brmerge_reg_348 == 1'd1) & (1'b1 == ap_CS_fsm_state5)))) begin
        foundLayers_we0 = 1'b1;
    end else begin
        foundLayers_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        stubs_data_barrel_s_ce0 = 1'b1;
    end else begin
        stubs_data_barrel_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        stubs_data_layerId_s_ce0 = 1'b1;
    end else begin
        stubs_data_layerId_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        stubs_data_psModule_s_ce0 = 1'b1;
    end else begin
        stubs_data_psModule_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_s_fu_164_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((tmp_51_fu_187_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_return = nLayers_fu_52;

assign brmerge3_i_fu_222_p2 = (tmp_36_not_i_fu_210_p2 | stub_psModule_read_s_fu_216_p2);

assign brmerge_fu_274_p2 = (stubs_data_psModule_s_q0 | onlySeed_not_reg_320);

assign brmerge_i_fu_204_p2 = (tmp_not_i_fu_198_p2 | stubs_data_psModule_s_q0);

assign indvarinc_fu_153_p2 = (invdar_reg_128 + 5'd1);

assign nLayers_1_fu_284_p2 = (nLayers_fu_52 + 32'd1);

assign onlySeed_not_fu_170_p0 = onlySeed;

assign onlySeed_not_fu_170_p2 = (onlySeed_not_fu_170_p0 ^ 1'd1);

assign p_0_i_fu_266_p3 = ((sel_tmp5_demorgan_i_fu_260_p2[0:0] === 1'b1) ? sel_tmp2_i_fu_252_p3 : tmp_i_fu_228_p2);

assign p_begin_0_rec_cast_fu_180_p1 = p_begin_0_rec_reg_139;

assign p_rec_fu_192_p2 = (p_begin_0_rec_reg_139 + 32'd1);

assign sel_tmp1_i_fu_246_p2 = (stubs_data_barrel_s_q0 | sel_tmp_i_fu_240_p2);

assign sel_tmp2_i_fu_252_p3 = ((sel_tmp1_i_fu_246_p2[0:0] === 1'b1) ? stubs_data_layerId_s_q0 : tmp_17_i_fu_234_p2);

assign sel_tmp5_demorgan_i_fu_260_p2 = (stubs_data_barrel_s_q0 | brmerge_i_fu_204_p2);

assign sel_tmp_i_fu_240_p2 = (brmerge_i_fu_204_p2 & brmerge3_i_fu_222_p2);

assign stub_psModule_read_s_fu_216_p2 = (stubs_data_psModule_s_q0 ^ 1'd1);

assign stubs_data_barrel_s_address0 = p_begin_0_rec_cast_fu_180_p1;

assign stubs_data_layerId_s_address0 = p_begin_0_rec_cast_fu_180_p1;

assign stubs_data_psModule_s_address0 = p_begin_0_rec_cast_fu_180_p1;

assign tmp_17_i_fu_234_p2 = ($signed(stubs_data_layerId_s_q0) + $signed(32'd4294967286));

assign tmp_36_not_i_fu_210_p2 = ((stubs_data_layerId_s_q0 < 32'd21) ? 1'b1 : 1'b0);

assign tmp_51_fu_187_p2 = ((p_begin_0_rec_reg_139 == stubs_size_read) ? 1'b1 : 1'b0);

assign tmp_52_fu_279_p1 = p_0_i_fu_266_p3;

assign tmp_fu_159_p1 = invdar_reg_128;

assign tmp_i_fu_228_p2 = (stubs_data_layerId_s_q0 + 32'd10);

assign tmp_not_i_fu_198_p2 = ((stubs_data_layerId_s_q0 > 32'd19) ? 1'b1 : 1'b0);

assign tmp_s_fu_164_p2 = ((invdar_reg_128 == 5'd29) ? 1'b1 : 1'b0);

endmodule //countStubLayers
