-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity has_key is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    mapHLS_unsigned_int_arrayHLS_Stub_size_read : IN STD_LOGIC_VECTOR (31 downto 0);
    mapHLS_unsigned_int_arrayHLS_Stub_data_first_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    mapHLS_unsigned_int_arrayHLS_Stub_data_first_ce0 : OUT STD_LOGIC;
    mapHLS_unsigned_int_arrayHLS_Stub_data_first_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    idx_read : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of has_key is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_fu_66_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_97 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_1_fu_71_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_reg_101 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_43 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_5_fu_82_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_p_0_phi_fu_58_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_0_reg_54 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_77_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv1_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and ((tmp_5_fu_82_p2 = ap_const_lv1_1) or (tmp_reg_97 = ap_const_lv1_0)))) then 
                    ap_return_preg <= ap_phi_mux_p_0_phi_fu_58_p4;
                end if; 
            end if;
        end if;
    end process;


    i_reg_43_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_5_fu_82_p2 = ap_const_lv1_0) and (tmp_reg_97 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_reg_43 <= i_1_reg_101;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_43 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    p_0_reg_54_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_5_fu_82_p2 = ap_const_lv1_1) and (tmp_reg_97 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                p_0_reg_54 <= ap_const_lv1_1;
            elsif (((tmp_fu_66_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_0_reg_54 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_1_reg_101 <= i_1_fu_71_p2;
                tmp_reg_97 <= tmp_fu_66_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, tmp_reg_97, ap_CS_fsm_state3, tmp_5_fu_82_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and ((tmp_5_fu_82_p2 = ap_const_lv1_1) or (tmp_reg_97 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, tmp_reg_97, ap_CS_fsm_state3, tmp_5_fu_82_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state3) and ((tmp_5_fu_82_p2 = ap_const_lv1_1) or (tmp_reg_97 = ap_const_lv1_0))) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_p_0_phi_fu_58_p4_assign_proc : process(tmp_reg_97, ap_CS_fsm_state3, tmp_5_fu_82_p2, p_0_reg_54)
    begin
        if (((tmp_5_fu_82_p2 = ap_const_lv1_1) and (tmp_reg_97 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_phi_mux_p_0_phi_fu_58_p4 <= ap_const_lv1_1;
        else 
            ap_phi_mux_p_0_phi_fu_58_p4 <= p_0_reg_54;
        end if; 
    end process;


    ap_ready_assign_proc : process(tmp_reg_97, ap_CS_fsm_state3, tmp_5_fu_82_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and ((tmp_5_fu_82_p2 = ap_const_lv1_1) or (tmp_reg_97 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(tmp_reg_97, ap_CS_fsm_state3, tmp_5_fu_82_p2, ap_phi_mux_p_0_phi_fu_58_p4, ap_return_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and ((tmp_5_fu_82_p2 = ap_const_lv1_1) or (tmp_reg_97 = ap_const_lv1_0)))) then 
            ap_return <= ap_phi_mux_p_0_phi_fu_58_p4;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    i_1_fu_71_p2 <= std_logic_vector(unsigned(i_reg_43) + unsigned(ap_const_lv32_1));
    mapHLS_unsigned_int_arrayHLS_Stub_data_first_address0 <= tmp_s_fu_77_p1(5 - 1 downto 0);

    mapHLS_unsigned_int_arrayHLS_Stub_data_first_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            mapHLS_unsigned_int_arrayHLS_Stub_data_first_ce0 <= ap_const_logic_1;
        else 
            mapHLS_unsigned_int_arrayHLS_Stub_data_first_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_5_fu_82_p2 <= "1" when (mapHLS_unsigned_int_arrayHLS_Stub_data_first_q0 = idx_read) else "0";
    tmp_fu_66_p2 <= "1" when (unsigned(i_reg_43) < unsigned(mapHLS_unsigned_int_arrayHLS_Stub_size_read)) else "0";
    tmp_s_fu_77_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_43),64));
end behav;
